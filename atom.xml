<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sampwood的One Piece</title>
  
  <subtitle>step by step</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sampwood.github.io/"/>
  <updated>2020-08-02T14:58:23.508Z</updated>
  <id>https://sampwood.github.io/</id>
  
  <author>
    <name>Sampwood</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web worker</title>
    <link href="https://sampwood.github.io/2020/08/02/web-worker/"/>
    <id>https://sampwood.github.io/2020/08/02/web-worker/</id>
    <published>2020-08-02T14:54:33.000Z</published>
    <updated>2020-08-02T14:58:23.508Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到一篇文章讲解了web worker的技术方案。很有收获，虽然目前虽然不一定能用上。</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>Web Worker 作为浏览器多线程技术, 在页面内容不断丰富, 功能日趋复杂的当下, 成为缓解页面卡顿, 提升应用性能的可选方案.</p></blockquote><p>web worker可以创建一个新的线程来执行重度逻辑，xhr，IO等操作。因为它不会影响主线程的运行，所以其在某些场景下可以解决页面卡顿，提升渲染性能。</p><p>官方文档是 MDN 的 Web Workers API. 其对 Web Worker 的表述是:</p><blockquote><p>Web Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application.</p></blockquote><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>web worker的浏览器兼容性还不错，主流浏览器在几年前就支持 Worker。</p><blockquote><p>可见当下浏览器已经较好地支持 Worker, 只要对 0.09% 的不支持浏览器做好回退策略(如展示一个 tip), Worker 可以放心地应用到前端业务中.</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> Worker(<span class="string">'./worker.js'</span>);</span><br><span class="line">worker.postMessage(<span class="string">'hello'</span>);</span><br><span class="line">worker.onmessage = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.data); <span class="comment">// 'world'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// worker.js</span></span><br><span class="line">self.onmessage = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.data); <span class="comment">// 'hello'</span></span><br><span class="line">    postMessage(<span class="string">'world'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要流程为:</p><ul><li>主线程调用 new Worker(url) 创建 Worker 实例, url 为 Worker JS 资源 url.</li><li>主线程调用 postMessage 发送 hello, </li><li>主线程创建监听：在 onmesssage 中监听 Worker 线程消息.</li><li>Worker 线程在 onmessage 中监听主线程消息, 收到主线程的 hello; </li><li>Worker 通过 postMessage 回复 world.</li><li>主线程在消息回调中收到 Worker 的 world 信息.</li></ul><p>语法也比较简单。但是在实用时，还是对数据通信这部分做一下封装。也有库做了这些事，可以搜搜。</p><h4 id="运行环境差异"><a href="#运行环境差异" class="headerlink" title="运行环境差异"></a>运行环境差异</h4><p>worker 和 主线程的运行环境还是有一些差异的。最主要就是worker 是不支持 UI 的，所以dom相关的api是不存在的。而且worker 的global对象不是主线程的window对象。Worker 线程运行时, 会创建独立于主线程的 JS 运行环境, 称之为 DedicatedWorkerGlobalScope。</p><h3 id="通信速度等"><a href="#通信速度等" class="headerlink" title="通信速度等"></a>通信速度等</h3><p>对web worker通信速度等测试就由专业人员来进行了~~</p><h3 id="service-work"><a href="#service-work" class="headerlink" title="service work"></a>service work</h3><p>看到这，有没有想起另一个独立注册运行的功能 service work呢？</p><p>service work和web work还是有一定的区别的。service work会脱离页面运行，就是在页面没有访问到时也会独立运行。</p><blockquote><p>Service workers本质上充当Web应用程序与浏览器之间的代理服务器，也可以在网络可用时作为浏览器和网络间的代理。它们旨在（除其他之外）使得能够创建有效的离线体验，拦截网络请求并基于网络是否可用以及更新的资源是否驻留在服务器上来采取适当的动作。</p></blockquote><p>service worker是对页面内容做缓存和更新，相当于创建一个可以offline工作的app。</p><p>而web worker主要功能是把复杂的占用cpu时间长的逻辑抽离出来，减少页面卡顿，提高页面渲染性能。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s/MyRRIbn-UoruVD1dpvD-QQ" target="_blank" rel="noopener">【第2015期】Web Worker 文献综述</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到一篇文章讲解了web worker的技术方案。很有收获，虽然目前虽然不一定能用上。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="js" scheme="https://sampwood.github.io/categories/coding/js/"/>
    
    
      <category term="浏览器" scheme="https://sampwood.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>新获取的知识点</title>
    <link href="https://sampwood.github.io/2020/04/20/%E6%96%B0%E8%8E%B7%E5%8F%96%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://sampwood.github.io/2020/04/20/新获取的知识点/</id>
    <published>2020-04-20T03:39:26.000Z</published>
    <updated>2020-08-02T14:57:56.661Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些在学习过程中get到的新知识点。</p><h3 id="e2e"><a href="#e2e" class="headerlink" title="e2e"></a>e2e</h3><p>e2e或者端到端（end-to-end）或者UI测试是一种测试方法，它用来测试一个应用从头到尾的流程是否和设计时候所想的一样。简而言之，它从一个用户的角度出发，认为整个系统都是一个黑箱，只有UI会暴露给用户。</p><p>具体链接看：<a href="http://sentsin.com/web/658.html" target="_blank" rel="noopener">http://sentsin.com/web/658.html</a><br><a id="more"></a></p><h3 id="angular1-5"><a href="#angular1-5" class="headerlink" title="angular1.5"></a>angular1.5</h3><h4 id="指令的transclude选项以及ng-transclude指令"><a href="#指令的transclude选项以及ng-transclude指令" class="headerlink" title="指令的transclude选项以及ng-transclude指令"></a>指令的transclude选项以及ng-transclude指令</h4><p><code style="color: #c7254e; background-color: #f9f2f4">transclude</code>字面意思就是嵌入，也就是说你需不需要将你的指令内部的元素（注意不是指令的模板）嵌入到你的模板中去，默认是false。</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h4><ul><li>安装python模块：<code>sudo apt-get update</code>，<code>sudo apt-get install python-websocket</code></li><li>安装jdk：<code>sudo apt-get install openjdk-8-jdk</code></li></ul><h4 id="命令行下载-google-drive-中的文件"><a href="#命令行下载-google-drive-中的文件" class="headerlink" title="命令行下载 google drive 中的文件"></a>命令行下载 <code>google drive</code> 中的文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --load-cookies /tmp/cookies.txt <span class="string">"https://docs.google.com/uc?export=download&amp;confirm=<span class="variable">$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&amp;id=FILEID' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+)</span>.*/\1\n/p')&amp;id=FILEID"</span> -O FILENAME &amp;&amp; rm -rf /tmp/cookies.txt</span><br></pre></td></tr></table></figure><p><strong>Note</strong>: 其中 <code>FILEI</code>D 是 <code>Google Drive</code> 共享文件的<code>ID</code>，可以通过 右键-&gt;【获取共享链接】得到， <code>FILENAME</code> 随意 </p><h4 id="terminal"><a href="#terminal" class="headerlink" title="terminal"></a>terminal</h4><p>设置代理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>clone 某个分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b b1 https://github.com/...</span><br></pre></td></tr></table></figure></p><p>clone 指定目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/... directory</span><br></pre></td></tr></table></figure></p><p>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</p><p>git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>debug:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在chrome中debug：</span><br><span class="line">1. 安装插件node-inspector</span><br><span class="line">    npm install -g node-inspector</span><br><span class="line">    node-debug main.js</span><br><span class="line"></span><br><span class="line">ps：如果不能正常安装node-inspector，把npm回退到5.3.0</span><br></pre></td></tr></table></figure></p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>最简单的示例代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">descript(<span class="string">'模块名'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">'期待的正确行为与结果'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">        ...测试代码</span><br><span class="line"></span><br><span class="line">        assert.equal(&#123;期待的结果&#125;, &#123;实际的结果&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="Sinon"><a href="#Sinon" class="headerlink" title="Sinon"></a>Sinon</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口：sinon对象（全局对象）</span></span><br><span class="line"><span class="keyword">const</span> sandbox = sinon.sandbox.create();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法：stub，替代对象原生的方法，当调用之后直接返回给定的结果</span></span><br><span class="line">sandbox.stub(&#123;对象&#125;, <span class="string">'方法名'</span>).returns(<span class="string">'直接返回的结果'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消对方法的监视</span></span><br><span class="line">sandbox.restore();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法：spy，模拟一个函数，记录它被调用的参数以及调用次数</span></span><br><span class="line"><span class="comment">// 1. 创建一个匿名函数</span></span><br><span class="line"><span class="keyword">var</span> callback = sinon.spy();</span><br><span class="line">PubSub.subscribe(<span class="string">"message"</span>, callback);</span><br><span class="line"></span><br><span class="line">PubSub.publishSync(<span class="string">"message"</span>);</span><br><span class="line"></span><br><span class="line">assertTrue(callback.called);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 包装一个已经存在的函数</span></span><br><span class="line">sinon.spy(jQuery, <span class="string">'ajax'</span>);</span><br><span class="line"></span><br><span class="line">jQuery.getJSON(<span class="string">"/some/resource"</span>);</span><br><span class="line"></span><br><span class="line">assert(jQuery.ajax.calledOnce);</span><br></pre></td></tr></table></figure><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ul><li>引入css文件：<code>@import &#39;./default.css&#39;</code></li><li>vue <code>component</code> 加 <code>key</code> 可以让页面重新渲染</li><li>异步组件：Vue 允许以一个工厂函数的方式定义组件，这个工厂函数会异步解析组件定义<code>&#39;my-component&#39;: () =&gt; import(&#39;./my-async-component&#39;)</code></li><li>路由懒加载：结合 <code>Vue</code> 的异步组件和 <code>Webpack</code> 的代码分割功能，轻松实现路由组件的懒加载。</li></ul><h4 id="Vue-cli3"><a href="#Vue-cli3" class="headerlink" title="Vue cli3"></a>Vue cli3</h4><ul><li>vue 使用了 sockjs-client/sockjs-node 保证我们在改完代码重新编译之后，能够通知浏览器重新加载变更结果。<br>如果出现 <code>WebSocket connection to &#39;ws://192.168.30.104:8080/sockjs-node/292/auzldzcy/websocket&#39; failed: WebSocket is closed before the connection is established.</code> 的警告，则有可能是开了全局代理</li></ul><h4 id="Vue-全局错误捕获"><a href="#Vue-全局错误捕获" class="headerlink" title="Vue 全局错误捕获"></a>Vue 全局错误捕获</h4><p>在vue项目中，用<code>window.onerror</code> 的方式捕获不到全局错误。<br>得用官方提供的 <code>Vue.config.errorHandler</code> 来捕获全局错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="function"><span class="keyword">function</span> (<span class="params">err, vm, info</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// handle error</span></span><br><span class="line">  <span class="comment">// `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span></span><br><span class="line">  <span class="comment">// 只在 2.2.0+ 可用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Note</strong>: <a href="https://cn.vuejs.org/v2/api/#errorHandler" target="_blank" rel="noopener">链接</a></p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><ul><li>nrm: 快速切换npm源</li></ul><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><ul><li>Array数组排序方法sort的返回必须是<strong>两个值相减</strong>，不能是大于小于相比。因为排序似乎使用返回值和0，-1，1比较来排序的。</li><li>错误跟踪插件：sentry</li><li>es6中module语法<code>import</code>用于静态文件导入（被 JavaScript 引擎静态分析），符合 <code>ECMAScript 提案</code> 的 <code>import()</code> 语法可以完成动态加载</li></ul><h4 id="判断浏览器"><a href="#判断浏览器" class="headerlink" title="判断浏览器"></a>判断浏览器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ua = <span class="built_in">window</span>.navigator.userAgent;</span><br><span class="line"><span class="keyword">const</span> isIE = <span class="built_in">window</span>.ActiveXObject !== <span class="literal">undefined</span> &amp;&amp; ua.includes(<span class="string">'MSIE'</span>);</span><br><span class="line"><span class="keyword">const</span> isIE11 = ua.includes(<span class="string">'Trident'</span>) &amp;&amp; ua.includes(<span class="string">'rv:11.0'</span>);</span><br><span class="line"><span class="keyword">const</span> isEdge = ua.includes(<span class="string">'Edge'</span>);</span><br><span class="line"><span class="keyword">const</span> isFirefox = ua.includes(<span class="string">'Firefox'</span>);</span><br><span class="line"><span class="keyword">const</span> isChrome = (ua.includes(<span class="string">'Chrome'</span>) &amp;&amp; <span class="built_in">window</span>.chrome) || ua.match(<span class="string">'CriOS'</span>); <span class="comment">// 'CriOS'判断在ipad上是不是chrome</span></span><br><span class="line"><span class="keyword">const</span> isSafari = ua.includes(<span class="string">'Safari'</span>) &amp;&amp; ua.includes(<span class="string">'Version'</span>);</span><br><span class="line"><span class="keyword">const</span> isQQBrower = ua.includes(<span class="string">'QQBrowser'</span>);</span><br><span class="line"><span class="keyword">const</span> is360EE = ua.includes(<span class="string">'360EE'</span>);</span><br><span class="line"><span class="keyword">const</span> is360SE = ua.includes(<span class="string">'360SE'</span>);</span><br><span class="line"><span class="keyword">const</span> isSouGou = ua.includes(<span class="string">'MetaSr'</span>);</span><br><span class="line"><span class="keyword">const</span> hasMine = navigator.mimeTypes[<span class="string">'application/vnd.chromium.remoting-viewer'</span>]; <span class="comment">// 360浏览器判断(ps: 不确定)</span></span><br></pre></td></tr></table></figure><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><ul><li>代码分割功能：当涉及到动态代码拆分时，webpack 提供了两个类似的技术。对于动态导入，第一种，也是推荐选择的方式是，使用符合 ECMAScript 提案 的 import() 语法。<code>import(&#39;path/to/module&#39;) -&gt; Promise</code></li></ul><h3 id="PM2"><a href="#PM2" class="headerlink" title="PM2"></a>PM2</h3><p>PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。</p><p>参考：<a href="http://www.cnblogs.com/chyingp/p/pm2-documentation.html" target="_blank" rel="noopener">PM2实用入门指南</a></p><h3 id="npm-script"><a href="#npm-script" class="headerlink" title="npm script"></a>npm script</h3><p>npm 脚本有一个非常强大的功能，就是可以使用 npm 的内部变量。<br>例如<code>npm_package_version</code>能获取到项目版本信息。</p><p>然后，npm 脚本还可以通过<code>npm_config_</code>前缀，拿到 npm 的配置变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;node build/build.js&quot;,</span><br><span class="line">    &quot;build:axios&quot;: &quot;npm_config_axios=true npm run build&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// webpack.config.js</span><br><span class="line">&#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &apos;~services&apos;: process.env.npm_config_axios ? resolve(&apos;src/services-axios&apos;) : resolve(&apos;src/services&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><p>Safari 不支持正则反向匹配（(?&lt;=\d)）</p><h3 id="数据埋点-跨域"><a href="#数据埋点-跨域" class="headerlink" title="数据埋点 + 跨域"></a>数据埋点 + 跨域</h3><p>为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？</p><p>利用空白gif或1x1 px的img是互联网广告或网站监测方面常用的手段，简单、安全、相比PNG/JPG体积小，1px 透明图，对网页内容的影响几乎没有影响，这种请求用在很多地方，比如浏览、点击、热点、心跳、ID颁发等等，</p><ul><li>避免跨域（img 天然支持跨域）；没有跨域问题，一般这种上报数据，代码要写通用的；（排除ajax）</li><li>不会阻塞页面加载，影响用户的体验，只要new Image对象就好了；（排除JS/CSS文件资源方式上报）一般情况下也不需要append到DOM中，通过它的onerror和onload事件来检测发送状态。</li><li>在所有图片中，体积最小；（比较PNG/JPG）GIF的最低合法体积最小（最小的BMP文件需要74个字节，PNG需要67个字节，而合法的GIF，只需要43个字节）</li><li>触发 GET 请求之后不需要获取和处理数据、服务器也不需要发送数据</li><li>图片请求不占用 Ajax 请求限额，相比 XMLHttpRequest 对象发送 GET 请求，性能上更好</li></ul><p>除了img 天然支持跨域之外，script 标签也是支持跨域的，这也是 <code>jsonp</code> 跨域方案的基础。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>变量是个对象，带属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Assign the project to an employee.</span><br><span class="line"> * @param &#123;Object&#125; employee - The employee who is responsible for the project.</span><br><span class="line"> * @param &#123;string&#125; employee.name - The name of the employee.</span><br><span class="line"> * @param &#123;string&#125; employee.department - The employee&apos;s department.</span><br><span class="line"> */</span><br><span class="line"> Project.prototype.assign = function(employee) &#123;    // ...&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="map标签"><a href="#map标签" class="headerlink" title="map标签"></a>map标签</h3><p>今天看到一段代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"planets.jpg"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">usemap</span>=<span class="string">"#planetmap"</span> <span class="attr">alt</span>=<span class="string">"Planets"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">"planetmap"</span> <span class="attr">id</span>=<span class="string">"planetmap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"circle"</span> <span class="attr">coords</span>=<span class="string">"180,139,14"</span> <span class="attr">href</span> =<span class="string">"venus.html"</span> <span class="attr">alt</span>=<span class="string">"Venus"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"circle"</span> <span class="attr">coords</span>=<span class="string">"129,161,10"</span> <span class="attr">href</span> =<span class="string">"mercur.html"</span> <span class="attr">alt</span>=<span class="string">"Mercury"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">"rect"</span> <span class="attr">coords</span>=<span class="string">"0,0,110,260"</span> <span class="attr">href</span> =<span class="string">"sun.html"</span> <span class="attr">alt</span>=<span class="string">"Sun"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><p>忽然发现自己对map标签不是很熟悉。然后就查了下。发现这是一个挺有意思的标签。</p><p>其实这个标签的功能是在图片的区域内切割一部分来实现点击弹出新页面的功能。上面代码中area标签中的shape和coords属性分别用来定义区域的形状和可点击区域（对鼠标敏感的区域）的坐标。而href属性就是用来指定新页面的URL，和a标签的href具有相同的意义。同时，area也具有target属性。</p><p>map标签需要结合img标签中的usemap属性来使用。usemap中的#planetmap指定了要使用的map的id。</p><p><strong><em>注意</em></strong>：<code>&lt;img&gt;</code> 中的 usemap 属性可引用 <code>&lt;map&gt;</code> 中的 id 或 name 属性（由浏览器决定），所以我们需要同时向 <code>&lt;map&gt;</code> 添加 id 和 name 两个属性。</p><h3 id="爬虫协议"><a href="#爬虫协议" class="headerlink" title="爬虫协议"></a>爬虫协议</h3><p>如果你希望你的网站所有内容都被百度爬取，那么只要不写 <code>rebots.txt</code> 就行，</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些在学习过程中get到的新知识点。&lt;/p&gt;
&lt;h3 id=&quot;e2e&quot;&gt;&lt;a href=&quot;#e2e&quot; class=&quot;headerlink&quot; title=&quot;e2e&quot;&gt;&lt;/a&gt;e2e&lt;/h3&gt;&lt;p&gt;e2e或者端到端（end-to-end）或者UI测试是一种测试方法，它用来测试一个应用从头到尾的流程是否和设计时候所想的一样。简而言之，它从一个用户的角度出发，认为整个系统都是一个黑箱，只有UI会暴露给用户。&lt;/p&gt;
&lt;p&gt;具体链接看：&lt;a href=&quot;http://sentsin.com/web/658.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://sentsin.com/web/658.html&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://sampwood.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="e2e" scheme="https://sampwood.github.io/tags/e2e/"/>
    
  </entry>
  
  <entry>
    <title>prerender-vue</title>
    <link href="https://sampwood.github.io/2020/03/18/prerender-vue/"/>
    <id>https://sampwood.github.io/2020/03/18/prerender-vue/</id>
    <published>2020-03-18T08:18:03.000Z</published>
    <updated>2020-03-18T08:21:17.209Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>目前大部分接触到的页面都会使用SPA来实现。但是SPA会有个问题，就是对于SEO的支持不是很好。</p><p>对于vue项目来说，可以使用nuxt一把梭😹。<br>但对于简单的场景来说，其实也可以用预渲染的方式来只对首页和文档部分做静态渲染。<br>这样既满足了SEO的支持，也和原本vue的写法一样。</p><a id="more"></a><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><h4 id="prerender-spa-plugin"><a href="#prerender-spa-plugin" class="headerlink" title="prerender-spa-plugin"></a>prerender-spa-plugin</h4><p>预渲染依赖 <code>prerender-spa-plugin</code> 插件。</p><p><code>prerender-spa-plugin</code> 是 <code>webpack</code> 的插件，所以用 <code>webpack</code> 打包的单页面（<code>react</code>，<code>vue</code>，<code>angular</code>等）都能使用。</p><p><code>prerender-spa-plugin</code> 原理就是使用浏览器内核预先加载页面渲染数据得到完整页面后生成完整的<code>html</code>文件。</p><h4 id="sitemap-js"><a href="#sitemap-js" class="headerlink" title="sitemap.js"></a>sitemap.js</h4><p>百度爬虫非常喜欢Sitemap，Sitemap协议使你能够告知搜索引擎网站中可供抓取的网址，sitemap的生成就是让搜索引擎更好的去访问网站从而给网站的收录产生一个好的作用。</p><p>所以用<code>sitemap</code> 库来自动生成 <code>sitemap.xml</code> 文件对SEO有很大帮助。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add prerender-spa-plugin sitemap -D</span><br></pre></td></tr></table></figure><h4 id="将vue-router-mode属性改为history"><a href="#将vue-router-mode属性改为history" class="headerlink" title="将vue router mode属性改为history"></a>将vue router mode属性改为history</h4><p>mode必须为history，如果不改为history，在hash模式下，prerender-spa-plugin打包出来的静态html只有首页的html是完整的，其他页面还是用的首页骨架，然后动态生成生成html替换，就达不到seo的效果。</p><h4 id="配置webpack文件"><a href="#配置webpack文件" class="headerlink" title="配置webpack文件"></a>配置webpack文件</h4><p>修改build/webpack.prod.conf.js 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const resolve = dir =&gt; path.join(__dirname, &apos;..&apos;, dir);</span><br><span class="line">// pre-render</span><br><span class="line">const PrerenderSPAPlugin = require(&apos;prerender-spa-plugin&apos;)</span><br><span class="line">const Renderer = PrerenderSPAPlugin.PuppeteerRenderer</span><br><span class="line">const VueLoaderPlugin = require(&apos;vue-loader/lib/plugin&apos;)</span><br><span class="line">const routes = [&apos;/&apos;] // 确定需要预渲染的页面路由和生成sitemap的路由，这两个也可以分开</span><br><span class="line">// sitemap url容器</span><br><span class="line">const sitemap = require(&apos;sitemap&apos;);</span><br><span class="line">const siteMapUrls = [];</span><br><span class="line"></span><br><span class="line">const webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      // pre render</span><br><span class="line">      new PrerenderSPAPlugin(&#123;</span><br><span class="line">        staticDir: path.join(__dirname, &apos;../dist&apos;),</span><br><span class="line">        // Output directory</span><br><span class="line">        outputDir: path.join(__dirname, &apos;../dist/rendered&apos;),</span><br><span class="line">        routes,</span><br><span class="line">        postProcess (context) &#123;</span><br><span class="line">          //content 参数</span><br><span class="line">          const &#123;originalRoute, route, html&#125; = context;</span><br><span class="line">          //将路由添加到全局sitemap容器</span><br><span class="line">          siteMapUrls.push(originalRoute);</span><br><span class="line"></span><br><span class="line">          //当当前路由为最后一个生成路由时  </span><br><span class="line">          if (route === routes[routes.length - 1]) &#123;</span><br><span class="line">            //去除重复的链接</span><br><span class="line">            let currentSiteMapUrls = Array.from(new Set(siteMapUrls));</span><br><span class="line">            // //过滤掉链接中的锚点后内容</span><br><span class="line">            currentSiteMapUrls = currentSiteMapUrls.map(url =&gt; &#123;</span><br><span class="line">              const isMao = url.indexOf(&apos;#&apos;) &gt; -1;</span><br><span class="line">              //生成sitemap所需数据，具体参数参详sitemap.js官网</span><br><span class="line">              return &#123;url: isMao ? url.split(&apos;#&apos;)[0] : url, changefreq: &apos;weekly&apos;, priority: 1, lastmod: new Date().toLocaleDateString()&#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            //生成siteMap文件</span><br><span class="line">            const sm = sitemap.createSitemap(&#123;</span><br><span class="line">              //路由前缀地址，全地址自动不会添加hostname</span><br><span class="line">              hostname: &apos;https://matpool.com&apos;,</span><br><span class="line">              cacheTime: 600000,  //600 sec (10 min) cache purge period</span><br><span class="line">              urls: currentSiteMapUrls</span><br><span class="line">            &#125;);</span><br><span class="line">            //将sitemap文件添加搭配打包文件夹dist中</span><br><span class="line">            fs.writeFileSync(resolve(&apos;dist/sitemap.xml&apos;), sm.toString());</span><br><span class="line">          &#125;</span><br><span class="line">          // 解决闪屏问题</span><br><span class="line">          context.html = html.replace(&apos;id=&quot;app&quot;&apos;, &apos;id=&quot;app&quot; data-server-rendered=&quot;true&quot;&apos;);</span><br><span class="line">          //返回当前contet对象</span><br><span class="line">          return context</span><br><span class="line">        &#125;,</span><br><span class="line">        renderer: new Renderer(&#123;</span><br><span class="line">          inject: &#123;</span><br><span class="line">            foo: &apos;bar&apos;</span><br><span class="line">          &#125;,</span><br><span class="line">          headless: true,</span><br><span class="line">          renderAfterDocumentEvent: &apos;render-event&apos;,</span><br><span class="line">          //puppeteer参数，标签意思：完全信任在Chrome中打开的内容</span><br><span class="line">          args: [&apos;--no-sandbox&apos;, &apos;--disable-setuid-sandbox&apos;]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>上面webpack文件中 <code>postProcess</code> 是用来配合<code>sitemap</code>库生成<code>sitemap.xml</code>文件的。<br>PrerenderSPAPlugin 插件中其他代码是用来生成预渲染页面的。</p><h4 id="修改main-js"><a href="#修改main-js" class="headerlink" title="修改main.js"></a>修改main.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  i18n,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="comment">// 这个是关键，触发事件来引导预渲染。"render-event" 得和上面的PrerenderSPAPlugin.renderer.renderAfterDocumentEvent一致</span></span><br><span class="line">    <span class="built_in">document</span>.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'render-event'</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="依赖包不能下载"><a href="#依赖包不能下载" class="headerlink" title="依赖包不能下载"></a>依赖包不能下载</h4><p><code>prerender-spa-plugin</code> 依赖 google 的 <code>puppeteer</code> 库。所以install的时候需要翻墙，或者设置淘宝源。</p><h4 id="Linux不能正常打包"><a href="#Linux不能正常打包" class="headerlink" title="Linux不能正常打包"></a>Linux不能正常打包</h4><p>本地打包没有问题，linux服务器打包可能会出现ERROR: Fail to lauunch chrome!</p><p>原因一：linux 环境缺少一些<a href="https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md#chrome-headless-doesnt-launch-on-unix" target="_blank" rel="noopener">依赖</a></p><p>所以需要先在Linux上装好这些依赖。</p><p>因为我是用docker来构建部署的，这里提供下dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">"sampwood@163.com"</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/archive.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list; \</span></span><br><span class="line"><span class="bash">  apt-get update; \</span></span><br><span class="line"><span class="bash">  DEBIAN_FRONTEND=noninteractive \</span></span><br><span class="line"><span class="bash">  apt-get install -y --no-install-recommends \</span></span><br><span class="line"><span class="bash">  ca-certificates \</span></span><br><span class="line"><span class="bash">  bash \</span></span><br><span class="line"><span class="bash">  curl \</span></span><br><span class="line"><span class="bash">  git \</span></span><br><span class="line"><span class="bash">  apt-utils</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL https://deb.nodesource.com/setup_12.x | bash</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y nodejs</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -sL https://sentry.io/get-cli/ | bash</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm config <span class="built_in">set</span> sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install -g yarn@1.16.0 standard-version@7.1.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yarn config <span class="built_in">set</span> sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash">  apt-get update \</span></span><br><span class="line"><span class="bash">  &amp;&amp; apt-get install -y gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure><h4 id="闪屏"><a href="#闪屏" class="headerlink" title="闪屏"></a>闪屏</h4><p>在预渲染构建完成之后，访问页面，可能会出现闪屏的现象。</p><p>解决方法：在 <code>PrerenderSPAPlugin.postProcess</code> 中加入下面这段代码（上面的例子中已经加了）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.html = html.replace(<span class="string">'id="app"'</span>, <span class="string">'id="app" data-server-rendered="true"'</span>);</span><br></pre></td></tr></table></figure></p><h4 id="其他页面刷新时不能正常访问"><a href="#其他页面刷新时不能正常访问" class="headerlink" title="其他页面刷新时不能正常访问"></a>其他页面刷新时不能正常访问</h4><p>在预渲染页面之外的页面刷新时，可能会出现不能正常渲染的情况。</p><p>解决方法：配置 <code>nginx</code> 文件:<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># pre-rendered routes</span></span><br><span class="line">    <span class="attribute">location</span> = / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> /rendered/index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># all other dynamic routes</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">index</span> index.html;</span><br><span class="line">      <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里面的 <code>/rendered/</code> 文件夹要和上面<code>webpack.prod.conf.js</code> 中 <code>PrerenderSPAPlugin.outputDir</code> 保持一致</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://brickyang.github.io/2019/01/14/%E5%9B%BD%E5%86%85%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85-Puppeteer-%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">国内下载安装 Puppeteer 的方法</a></li><li><a href="https://juejin.im/post/5dcbc2196fb9a0606f094186#heading-2" target="_blank" rel="noopener">vue项目seo问题简单解决，并生成sitemap</a></li><li><a href="https://github.com/puppeteer/puppeteer/blob/master/docs/troubleshooting.md" target="_blank" rel="noopener">puppeteer Troubleshooting</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;p&gt;目前大部分接触到的页面都会使用SPA来实现。但是SPA会有个问题，就是对于SEO的支持不是很好。&lt;/p&gt;
&lt;p&gt;对于vue项目来说，可以使用nuxt一把梭😹。&lt;br&gt;但对于简单的场景来说，其实也可以用预渲染的方式来只对首页和文档部分做静态渲染。&lt;br&gt;这样既满足了SEO的支持，也和原本vue的写法一样。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="vue" scheme="https://sampwood.github.io/categories/coding/vue/"/>
    
    
      <category term="vue" scheme="https://sampwood.github.io/tags/vue/"/>
    
      <category term="environment" scheme="https://sampwood.github.io/tags/environment/"/>
    
      <category term="seo" scheme="https://sampwood.github.io/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染</title>
    <link href="https://sampwood.github.io/2020/01/22/browser-render/"/>
    <id>https://sampwood.github.io/2020/01/22/browser-render/</id>
    <published>2020-01-22T02:53:31.000Z</published>
    <updated>2020-08-02T14:58:10.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="我们为什么一再强调将css放在头部，将js文件放在尾部"><a href="#我们为什么一再强调将css放在头部，将js文件放在尾部" class="headerlink" title="我们为什么一再强调将css放在头部，将js文件放在尾部"></a>我们为什么一再强调将css放在头部，将js文件放在尾部</h3><p>在面试的过程中，经常会有人在回答页面的优化中提到将js放到body标签底部，原因是因为浏览器生成Dom树的时候是一行一行读HTML代码的，script标签放在最后面就不会影响前面的页面的渲染。<br>那么问题来了，既然Dom树完全生成好后页面才能渲染出来，浏览器又必须读完全部HTML才能生成完整的Dom树，script标签不放在body底部是不是也一样，因为dom树的生成需要整个文档解析完毕。</p><a id="more"></a><p><img src="/images/render-screenshot.png" alt="\images\render-screenshot"></p><p>我们再来看一下chrome在页面渲染过程中的，绿色标志线是First Paint的时间。<br>纳尼，为什么会出现firstpaint，页面的paint不是在渲染树生成之后吗？其实现代浏览器为了更好的用户体验,渲染引擎将尝试尽快在屏幕上显示的内容。<br>它不会等到所有HTML解析之前开始构建和布局渲染树。部分的内容将被解析并显示。也就是说浏览器能够渲染不完整的dom树和cssom，尽快的减少白屏的时间。<br>假如我们将js放在header，js将阻塞解析dom，dom的内容会影响到First Paint，导致First Paint延后。<br>所以说我们会将js放在后面，以减少First Paint的时间，但是不会减少DOMContentLoaded被触发的时间。</p><h3 id="从浏览器内核到事件循环"><a href="#从浏览器内核到事件循环" class="headerlink" title="从浏览器内核到事件循环"></a>从浏览器内核到事件循环</h3><p>我们都知道js是单线程的，但js是支持异步的，所以浏览器内核必然是多线程or多进程的。那么你知道浏览器内核都有哪些线程来支撑页面工作的吗？</p><p>我们先看看浏览器的多进程架构吧。<br>以 Chrome 为例,它由多个进程组成,每个进程都有自己核心的职责,它们相互配合完成浏览器的整体功能，每个进程中又包含多个线程,一个进程内的多个线程也会协同工作,配合完成所在进程的职责。<br>Chrome 采用多进程架构,其顶层存在一个 Browser process 用以协调浏览器的其它进程。（详情看参考1）</p><p>浏览器主要有4个进程：主进程、第三方插件进程、GPU进程、渲染进程。<br>而渲染进程又称为浏览器渲染进程或浏览器内核,内部是多线程的。主要负责页面渲染,脚本执行,事件处理等。</p><p>浏览器内核的线程主要包括：GUI渲染线程、JS引擎线程、事件触发线程、定时触发器线程、异步http请求线程。</p><p>看到这是不是有中熟悉的感觉，js除了主线程之外还有一个宏任务和一个微任务队列。<br>其中宏任务（macrotask）主要包含：script(整体代码)、setTimeout、setInterval、I/O、UI交互事件、postMessage、MessageChannel、setImmediate(Node.js 环境)，<br>微任务（microtask）主要包含：Promise.then、MutaionObserver、process.nextTick(Node.js 环境)。</p><p>这里面setTimeout、 setInterval 是不是就是对应的 <code>定时触发器线程</code> 呢？<br>UI交互事件 对应 <code>事件触发线程</code>？ xhr 对应 <code>异步http请求线程</code> ？</p><p>这么对照着来看，就能很好的区分开宏任务和微任务。</p><p>js时间循环的运行机制是：</p><ul><li>执行一个宏任务（栈中没有就从事件队列中获取）</li><li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li><li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li><li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li><li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）</li></ul><p>其中promise 构造函数的内容是立即执行的，then 中的函数会被放到对应的微任务列表中。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://juejin.im/post/5e143104e51d45414a4715f7" target="_blank" rel="noopener">从 8 道面试题看浏览器渲染过程与性能优化</a></li><li><a href="https://www.cnblogs.com/caizhenbo/p/6679478.html" target="_blank" rel="noopener">DOMContentLoaded与load的区别</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded" target="_blank" rel="noopener">DOMContentLoaded</a></li><li><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/7" target="_blank" rel="noopener">第 10 题：常见异步笔试题，请写出代码的运行结果</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;我们为什么一再强调将css放在头部，将js文件放在尾部&quot;&gt;&lt;a href=&quot;#我们为什么一再强调将css放在头部，将js文件放在尾部&quot; class=&quot;headerlink&quot; title=&quot;我们为什么一再强调将css放在头部，将js文件放在尾部&quot;&gt;&lt;/a&gt;我们为什么一再强调将css放在头部，将js文件放在尾部&lt;/h3&gt;&lt;p&gt;在面试的过程中，经常会有人在回答页面的优化中提到将js放到body标签底部，原因是因为浏览器生成Dom树的时候是一行一行读HTML代码的，script标签放在最后面就不会影响前面的页面的渲染。&lt;br&gt;那么问题来了，既然Dom树完全生成好后页面才能渲染出来，浏览器又必须读完全部HTML才能生成完整的Dom树，script标签不放在body底部是不是也一样，因为dom树的生成需要整个文档解析完毕。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="browser" scheme="https://sampwood.github.io/categories/coding/browser/"/>
    
    
      <category term="浏览器" scheme="https://sampwood.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>mongodb数据迁移</title>
    <link href="https://sampwood.github.io/2020/01/03/mongodb-data-migration/"/>
    <id>https://sampwood.github.io/2020/01/03/mongodb-data-migration/</id>
    <published>2020-01-03T03:27:31.000Z</published>
    <updated>2020-01-03T04:33:44.042Z</updated>
    
    <content type="html"><![CDATA[<p>这几天换服务器，然后在服务器上的<code>mongodb</code>就需要做一下数据迁移。在此记录下方法。</p><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>在<code>mongodb</code>中使用<code>mongodump</code>命令来备份数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h localhost:27017 -d <span class="built_in">test</span> -o /path/to/mongobackups</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>NOTE</strong>: <code>test</code> 是要备份的数据库实例名称</p><h3 id="数据还原"><a href="#数据还原" class="headerlink" title="数据还原"></a>数据还原</h3><p>在<code>mongodb</code>中使用<code>mongorestore</code>命令来恢复备份数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h [remote host]:27017 -d <span class="built_in">test</span> /path/to/mongobackups</span><br></pre></td></tr></table></figure></p><p><strong>NOTE</strong>: 如果要让<code>mongodb</code> 监听公网ip, 设置<code>/etc/mongod.conf</code> 中 <code>bindIp: 0.0.0.0</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://xiangsugar.github.io/2018/06/24/MongoDB%E4%B8%8D%E5%90%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/" target="_blank" rel="noopener">MongoDB不同服务器之间的数据迁移</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天换服务器，然后在服务器上的&lt;code&gt;mongodb&lt;/code&gt;就需要做一下数据迁移。在此记录下方法。&lt;/p&gt;
&lt;h3 id=&quot;数据备份&quot;&gt;&lt;a href=&quot;#数据备份&quot; class=&quot;headerlink&quot; title=&quot;数据备份&quot;&gt;&lt;/a&gt;数据备份&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;mongodb&lt;/code&gt;中使用&lt;code&gt;mongodump&lt;/code&gt;命令来备份数据：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mongodump -h localhost:27017 -d &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; -o /path/to/mongobackups&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="database" scheme="https://sampwood.github.io/categories/coding/database/"/>
    
    
      <category term="mongodb" scheme="https://sampwood.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>cool-css</title>
    <link href="https://sampwood.github.io/2019/12/26/cool-css/"/>
    <id>https://sampwood.github.io/2019/12/26/cool-css/</id>
    <published>2019-12-26T02:30:26.000Z</published>
    <updated>2019-12-26T02:34:51.696Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看到一个炫酷的css动画，仔细阅读了下，感觉还是挺好玩的，虽然业务场景上不太用的到，这里做下记录。</p><p>主要是用了<code>filter</code>这个属性。</p><p><a href="https://mp.weixin.qq.com/s/N2i9M8m4WsmdL-uYZwer5Q" target="_blank" rel="noopener">【第1816期】巧用 CSS 实现酷炫的充电动画</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天看到一个炫酷的css动画，仔细阅读了下，感觉还是挺好玩的，虽然业务场景上不太用的到，这里做下记录。&lt;/p&gt;
&lt;p&gt;主要是用了&lt;code&gt;filter&lt;/code&gt;这个属性。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/N2i9M
      
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="css" scheme="https://sampwood.github.io/categories/coding/css/"/>
    
    
      <category term="css" scheme="https://sampwood.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>初识QuickJS</title>
    <link href="https://sampwood.github.io/2019/11/27/new-quickjs/"/>
    <id>https://sampwood.github.io/2019/11/27/new-quickjs/</id>
    <published>2019-11-27T07:00:34.000Z</published>
    <updated>2019-11-27T07:07:04.965Z</updated>
    
    <content type="html"><![CDATA[<p>今天了解到一个牛逼的东西：<a href="https://bellard.org/quickjs/" target="_blank" rel="noopener">quikcjs</a>。</p><p>前段时间同事还在说有没有js转可执行文件的库。可惜知道的晚了点，不然可以让他们试试这个。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天了解到一个牛逼的东西：&lt;a href=&quot;https://bellard.org/quickjs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;quikcjs&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;前段时间同事还在说有没有js转可执行文件的库。可惜知道的晚了点，不然
      
    
    </summary>
    
      <category term="随笔" scheme="https://sampwood.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="js" scheme="https://sampwood.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>web端的音频流</title>
    <link href="https://sampwood.github.io/2019/10/25/stream-web/"/>
    <id>https://sampwood.github.io/2019/10/25/stream-web/</id>
    <published>2019-10-25T01:39:09.000Z</published>
    <updated>2019-12-30T07:26:27.385Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看到一个有意思的题目：怎么使用HTML5实现录音的功能？</p><p>然后试着了解了下，实现原理主要是用了<code>MediaStream</code>这个对象。</p><blockquote><p>The MediaStream interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks.<br>Each track is specified as an instance of MediaStreamTrack.<br>You can obtain a MediaStream object either by using the constructor or by calling MediaDevices.getUserMedia().</p></blockquote><p>这是来自<code>MDN文档</code> 对 <code>MediaStream</code> 的说明。</p><p>从中我们可以知道，可以通过 <code>MediaDevices.getUserMedia()</code> 方法来获取设备的音频输入功能。</p><a id="more"></a><h3 id="获取设备的摄像头和麦克风功能"><a href="#获取设备的摄像头和麦克风功能" class="headerlink" title="获取设备的摄像头和麦克风功能"></a>获取设备的摄像头和麦克风功能</h3><blockquote><p>The MediaDevices.getUserMedia() method prompts the user for permission to use a media input<br>which produces a MediaStream with tracks containing the requested types of media.<br>That stream can include, for example,<br>a video track (produced by either a hardware or virtual video source such as a camera, video recording device, screen sharing service, and so forth),<br>an audio track (similarly, produced by a physical or virtual audio source like a microphone, A/D converter, or the like), and possibly other track types.</p></blockquote><p>这是来自<code>MDN文档</code>的说明。</p><p><code>MediaDevices.getUserMedia()</code> 这个方法需要传入一个参数 <code>constraints</code> , 来指定对语音/视频的限制，例如： <code>{ audio: true, video: true }</code></p><p>然后参考它提供的demo，写了个 实时录音并播放的功能：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 50px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Older browsers might not implement mediaDevices at all, so we set an empty object first</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (navigator.mediaDevices === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="undefined">      navigator.mediaDevices = &#123;&#125;;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Some browsers partially implement mediaDevices. We can't just assign an object</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// with getUserMedia as it would overwrite existing properties.</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// Here, we will just add the getUserMedia property if it's missing.</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (navigator.mediaDevices.getUserMedia === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="javascript">      navigator.mediaDevices.getUserMedia = <span class="function"><span class="keyword">function</span>(<span class="params">constraints</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// First get ahold of the legacy getUserMedia, if present</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Some browsers just don't implement it - return a rejected promise with an error</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// to keep a consistent interface</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!getUserMedia) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'getUserMedia is not implemented in this browser'</span>));</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// Otherwise, wrap the call to the old navigator.getUserMedia with a Promise</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">          getUserMedia.call(navigator, constraints, resolve, reject);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    navigator.mediaDevices.getUserMedia(&#123; <span class="attr">audio</span>: <span class="literal">true</span>, <span class="attr">video</span>: <span class="literal">false</span> &#125;)</span></span><br><span class="line"><span class="javascript">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">stream</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">'audio'</span>);</span></span><br><span class="line"><span class="javascript">      <span class="comment">// Older browsers may not have srcObject</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="string">"srcObject"</span> <span class="keyword">in</span> audio) &#123;</span></span><br><span class="line"><span class="undefined">        audio.srcObject = stream;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Avoid using this in new browsers, as it is going away.</span></span></span><br><span class="line"><span class="javascript">        audio.src = <span class="built_in">window</span>.URL.createObjectURL(stream);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      audio.onloadedmetadata = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        audio.play();</span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(err.name + <span class="string">": "</span> + err.message);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>从上可以看出，只要把 <code>audio.srcObject</code> 设置成获取到的 <code>stream</code> 就可以播放录音了。</p><h3 id="如何停止录音"><a href="#如何停止录音" class="headerlink" title="如何停止录音"></a>如何停止录音</h3><p>在上面的例子中，我们实现了音频流的输入和输出。但是这个 <code>audio</code> 的暂停似乎只控制了音频的输出，那如何停止音频的输入呢？<br><code>MediaStream</code> 本身没有提供 <code>stop/end</code> 之类的方法。</p><p>从<code>MediaStream</code> 的说明中，可以看出 <code>MediaStream</code> 是由 <code>MediaStreamTrack</code> 组成的。</p><blockquote><p>The MediaStreamTrack interface represents a single media track within a stream;<br>typically, these are audio or video tracks, but other track types may exist as well.</p></blockquote><p><code>MediaStreamTrack</code> 提供了 <code>stop</code> 方法：</p><blockquote><p>Stops playing the source associated to the track, both the source and the track are deassociated. The track state is set to ended.</p></blockquote><blockquote><p>Calling stop() tells the user agent that the track’s source—whatever that source may be, including files, network streams, or a local camera or microphone—is no longer needed by the MediaStreamTrack.  Since multiple tracks may use the same source (for example, if two tabs are using the device’s microphone), the source itself isn’t necessarily immediately stopped. It is instead disassociated from the track and the track object is stopped. Once no media tracks are using the source, the source may actually be completely stopped.</p></blockquote><blockquote><p>Immediately after calling stop(), the track state is set to ended.</p></blockquote><p>所以停止录音的方法是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stream.getTracks().forEach(<span class="function"><span class="keyword">function</span>(<span class="params">track</span>) </span>&#123;</span><br><span class="line">  track.stop();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="音频流的保存"><a href="#音频流的保存" class="headerlink" title="音频流的保存"></a>音频流的保存</h3><p>当我们调用了设备的麦克风之后，得到了 <code>stream</code>。通过 <code>audio</code> 标签实现了 <code>stream</code> 的输出。此时如果要把得到这段<code>stream</code> 保存下来该如何做呢？</p><blockquote><p>The MediaStream Recording API, sometimes simply referred to as the Media Recording API or the MediaRecorder API, is closely affiliated with the Media Capture and Streams API and the WebRTC API. The MediaStream Recording API makes it possible to capture the data generated by a MediaStream or HTMLMediaElement object for analysis, processing, or saving to disk. It’s also surprisingly easy to work with.</p></blockquote><blockquote><p>The MediaStream Recording API is comprised of a single major interface, MediaRecorder, which does all the work of taking the data from a MediaStream and delivering it to you for processing. The data is delivered by a series of dataavailable events, already in the format you specify when creating the MediaRecorder. You can then process the data further or write it to file as desired.</p></blockquote><p>原来还有个 <code>MediaRecorder</code> 用以完成数据的保存😄</p><p>参考<code>MDN</code> 提供的demo，实现音频的保存和重播<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> recordedChunks = []</span><br><span class="line"><span class="keyword">const</span> mediaRecorder = <span class="keyword">new</span> MediaRecorder(stream) <span class="comment">// stream 就是我们前面获取到的 stream</span></span><br><span class="line"></span><br><span class="line">mediaRecorder.ondataavailable = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  recordedChunks.push(e.data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mediaRecorder.onstop = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob(recordedChunks, &#123; <span class="string">'type'</span> : <span class="string">'audio/ogg; codecs=opus'</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">'audio'</span>) <span class="comment">// 或者其他的 audio 对象</span></span><br><span class="line">  audio.src = URL.createObjectURL(blob)</span><br><span class="line">  audio.srcObject = <span class="literal">null</span> <span class="comment">// 如果之前的 audio设置了 srcObject 则需要在此处设置为null；否则不需要次操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mediaRecorder.start() <span class="comment">// 开始记录</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  mediaRecorder.stop() <span class="comment">// 结束记录</span></span><br><span class="line">&#125;, <span class="number">5000</span>) <span class="comment">// 自定义5s后结束记录，或者手动结束</span></span><br></pre></td></tr></table></figure></p><p>如果要下载的话，只需把上面创建的 <code>url</code> 放到 <code>a</code> 标签中就可实现。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API" target="_blank" rel="noopener">Media Capture and Streams API (Media Stream)</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia" target="_blank" rel="noopener">MediaDevices.getUserMedia()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/stop" target="_blank" rel="noopener">MediaStreamTrack.stop()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_Recording_API" target="_blank" rel="noopener">MediaStream Recording API</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天看到一个有意思的题目：怎么使用HTML5实现录音的功能？&lt;/p&gt;
&lt;p&gt;然后试着了解了下，实现原理主要是用了&lt;code&gt;MediaStream&lt;/code&gt;这个对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The MediaStream interface represents a stream of media content. A stream consists of several tracks such as video or audio tracks.&lt;br&gt;Each track is specified as an instance of MediaStreamTrack.&lt;br&gt;You can obtain a MediaStream object either by using the constructor or by calling MediaDevices.getUserMedia().&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是来自&lt;code&gt;MDN文档&lt;/code&gt; 对 &lt;code&gt;MediaStream&lt;/code&gt; 的说明。&lt;/p&gt;
&lt;p&gt;从中我们可以知道，可以通过 &lt;code&gt;MediaDevices.getUserMedia()&lt;/code&gt; 方法来获取设备的音频输入功能。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="html" scheme="https://sampwood.github.io/categories/coding/html/"/>
    
    
      <category term="html5" scheme="https://sampwood.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>引入stylelint对项目做代码样式审查</title>
    <link href="https://sampwood.github.io/2019/10/09/stylelint/"/>
    <id>https://sampwood.github.io/2019/10/09/stylelint/</id>
    <published>2019-10-09T03:05:09.000Z</published>
    <updated>2019-10-12T03:32:50.336Z</updated>
    
    <content type="html"><![CDATA[<p>早就看到<code>stylelint</code> 的介绍文章，感觉有点意思。因为懒，这几天才接入了这个样式检查的工具。</p><p>话不多说，直接看如何引入这个库吧。</p><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>安装相关依赖库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add stylelint stylelint-config-standard stylelint-config-prettier</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>从这里看好像并没有安装<code>webpack</code>相关的<code>plugin</code>啊，难道集成到<code>webpack</code>中不是更方便吗？</p><p>这里就不得不说下了，在<a href="https://vue-loader.vuejs.org/zh/guide/linting.html#eslint" target="_blank" rel="noopener">Vue Loader-代码校验 (Linting)</a>中有介绍如何集成<br><code>stylelint</code> 到 <code>webpack</code>，做自动化检测。</p><p>但是这个配置其实不适用在由<code>vue cli3</code>生成的项目中。配置<code>stylelint-webpack-plugin</code>插件到<code>vue.config.js</code>中之后，项目运行不起来。😣</p><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><h4 id="规则文件"><a href="#规则文件" class="headerlink" title="规则文件"></a>规则文件</h4><p>新建规则文件：<code>.stylelintrc.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'stylelint-config-standard'</span>,</span><br><span class="line">    <span class="string">'stylelint-config-prettier'</span></span><br><span class="line">  ],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'rule-empty-line-before'</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'at-rule-empty-line-before'</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'no-descending-specificity'</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'font-family-no-missing-generic-family-keyword'</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'max-empty-lines'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'block-opening-brace-space-before'</span>: <span class="string">'always'</span>,</span><br><span class="line">    <span class="string">'indentation'</span>: [<span class="number">2</span>],</span><br><span class="line">    <span class="string">'function-comma-space-after'</span>: <span class="string">'always-single-line'</span>,</span><br><span class="line">    <span class="string">'selector-list-comma-newline-after'</span>: <span class="string">'always'</span>,</span><br><span class="line">    <span class="string">'value-list-comma-newline-after'</span>: <span class="string">'always-multi-line'</span>,</span><br><span class="line">    <span class="string">'declaration-block-trailing-semicolon'</span>: <span class="string">'always'</span>,</span><br><span class="line">    <span class="string">'declaration-colon-space-after'</span>: <span class="string">'always'</span>,</span><br><span class="line">    <span class="string">'color-hex-case'</span>: <span class="string">'lower'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为我在项目用了<code>prettier</code> 来格式化js代码，为了保证其与<code>stylelint</code> 不冲突，我<code>extends</code>了<code>stylelint-config-prettier</code>。<br>这样我就不得不加一些自定义的<code>rules</code>了。因为<code>stylelint-config-prettier</code>的规则真的很弱，很多都不检查。</p><p>当然如果要忽略某些文件，可以建一个<code>.stylelintignore</code>文件。</p><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>在<code>package.json</code> 中定义<code>script</code>来自动运行监测。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    "lint": "vue-cli-service lint", // vue cli3生产项目自带的</span><br><span class="line">    "lint:style": "stylelint 'public/index.html' 'src/**/*.&#123;css,less,vue&#125;'", //新加的</span><br><span class="line">  &#125;,</span><br><span class="line">  "lint-staged": &#123;</span><br><span class="line">    "*.&#123;js,vue&#125;": [ // 这个是prettier用的，如果没有在项目用prettier，就不需要这个</span><br><span class="line">      "vue-cli-service lint",</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ],</span><br><span class="line">    "*.&#123;html,vue,css,less&#125;": [ // 这个是stylelint用的</span><br><span class="line">      "stylelint 'public/index.html' 'src/**/*.&#123;css,less,vue&#125;' --fix",</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置<code>package.json</code>文件之后，就可以手动运行<code>yarn lint:style</code>来检查样式代码了，或者<code>yarn lint:style --fix</code>来自动矫正</p><p>在<code>lint-staged</code>中加的代码，是为了能在代码<code>git commit</code>之前自动做一个检查，也就不需要每次都手动去跑命令了。</p><h3 id="vscode工具"><a href="#vscode工具" class="headerlink" title="vscode工具"></a>vscode工具</h3><p>在<code>vscode</code>中安装<code>stylelint</code>插件，按照他的要求修改下<code>settings.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"css.validate": false,</span><br><span class="line">"less.validate": false,</span><br><span class="line">"scss.validate": false</span><br></pre></td></tr></table></figure><p>但是这个插件目前还不支持在保存时自动fix。<code>stylelint-plus</code>可以，但是下载量还是较少</p><p>So，到此，引入<code>stylelint</code>成功。👏👏👏</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://stylelint.io/" target="_blank" rel="noopener">stylelint官网</a></li><li><a href="https://prettier.io/docs/en/integrating-with-linters.html#recommended-configuration-2" target="_blank" rel="noopener">prettier-Integrating with Linters</a></li><li><a href="https://vue-loader.vuejs.org/zh/guide/linting.html#eslint" target="_blank" rel="noopener">Vue Loader-代码校验 (Linting)</a></li><li><a href="https://segmentfault.com/a/1190000008708473" target="_blank" rel="noopener">引入stylelint对CSS/Sass做代码审查</a></li><li><a href="https://juejin.im/post/5c31c9a16fb9a049f8197000" target="_blank" rel="noopener">如何为你的 Vue 项目添加配置 Stylelint</a></li><li><a href="https://segmentfault.com/a/1190000020168436" target="_blank" rel="noopener">在Vue项目中使用Eslint+Prettier+Stylelint</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早就看到&lt;code&gt;stylelint&lt;/code&gt; 的介绍文章，感觉有点意思。因为懒，这几天才接入了这个样式检查的工具。&lt;/p&gt;
&lt;p&gt;话不多说，直接看如何引入这个库吧。&lt;/p&gt;
&lt;h3 id=&quot;install&quot;&gt;&lt;a href=&quot;#install&quot; class=&quot;headerlink&quot; title=&quot;install&quot;&gt;&lt;/a&gt;install&lt;/h3&gt;&lt;p&gt;安装相关依赖库&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yarn add stylelint stylelint-config-standard stylelint-config-prettier&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="css" scheme="https://sampwood.github.io/categories/coding/css/"/>
    
    
      <category term="environment" scheme="https://sampwood.github.io/tags/environment/"/>
    
      <category term="css" scheme="https://sampwood.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>网页性能优化</title>
    <link href="https://sampwood.github.io/2019/10/08/web-performance/"/>
    <id>https://sampwood.github.io/2019/10/08/web-performance/</id>
    <published>2019-10-08T10:47:33.000Z</published>
    <updated>2019-10-08T10:49:40.311Z</updated>
    
    <content type="html"><![CDATA[<p>记录下目前了解的一些优化网页性能的方法，包括初次加载时间等。</p><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p>目前开发的项目都是 <code>vue</code> 项目，<code>vue cli3</code> 默认使用 <code>webpack</code> 打包，所以从 <code>webpack</code> 方面入手优化项目是个挺好的角度。</p><h4 id="preload-prefetch"><a href="#preload-prefetch" class="headerlink" title="preload prefetch"></a>preload prefetch</h4><p>启动一个 <code>vue cli3</code> 创建的项目，发现在 <code>network</code> 中多了很多的请求，特殊的请求。这些请求被归类到 <code>other</code> 中。<br>而且这些资源被请求了两次。</p><p>查找了下资料发现，原来是因为这些 <code>other</code> 资源使用了 <code>preload</code> 或 <code>prefetch</code>。</p><p>那这是什么意思呢？</p><a id="more"></a><h5 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h5><p><code>preload</code> 指令让浏览器以<strong>高优秀级</strong>预加载指定的资源。浏览器在遇到<code>preload</code> 后会已异步的方式下载资源，也不会阻塞页面渲染。</p><p>在下载完成之后存在内存中，在页面解析到script加载的时候，直接读取执行。</p><p>但是假如你在当前页面没有用到<code>preload</code> 的资源，Chrome 会报一个警告。</p><p>这其实是<code>preload</code> 和 <code>prefetch</code> 的区别。<br><code>preload</code> 是以<code>高优先级</code>去加载当前页面将要使用的资源，而<code>prefetch</code> 是以<code>低优先级</code>去加载下个页面将会使用到的资源。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"/main.js"</span> <span class="attr">as</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="prefetch"><a href="#prefetch" class="headerlink" title="prefetch"></a>prefetch</h5><p><code>Prefetch</code> 是一个低优先级的资源提示，允许浏览器在<strong>后台（空闲时）</strong>获取将来可能用得到的资源，并且将他们存储在浏览器的缓存中。<br>一旦一个页面加载完毕就会开始下载其他的资源，然后当用户点击了一个带有 prefetched 的连接，它将可以立刻从缓存中加载内容。<br>有三种不同的 <code>prefetch</code> 的类型，<code>link</code>，<code>DNS</code> 和 <code>prerender</code>，下面来详细分析。</p><p><code>link</code> 用于加载资源，<code>DNS</code> 用于解析DNS，<code>prerender</code> 用于渲染页面。</p><h5 id="预先解析DNS"><a href="#预先解析DNS" class="headerlink" title="预先解析DNS"></a>预先解析DNS</h5><p><code>DNS prefetching</code> 允许浏览器在用户浏览页面时在后台运行 DNS 的解析。如此一来，<code>DNS</code> 的解析在用户点击一个链接时已经完成，所以可以减少延迟。<br>可以在一个 <code>link</code> 标签的属性中添加 <code>rel=&quot;dns-prefetch&#39;</code> 来对指定的 <code>URL</code> 进行 <code>DNS prefetching</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在head标签中，越早越好--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/"</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="preconnect"><a href="#preconnect" class="headerlink" title="preconnect"></a>preconnect</h5><p><code>preconnect</code> 允许浏览器在一个 <code>HTTP</code> 请求正式发给服务器前预先执行一些操作，这包括 <code>DNS</code> 解析，<code>TLS</code> 协商，<code>TCP</code> 握手，这消除了往返延迟并为用户节省了时间。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.domain.com"</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">crossorigin</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="defer和async"><a href="#defer和async" class="headerlink" title="defer和async"></a>defer和async</h4><p>既然说到资源的加载，就不得不说到js文件的异步加载。</p><p><code>defer</code> 和 <code>async</code> 是script标签的两个属性，用于在不阻塞页面文档解析的前提下，控制脚本的下载和执行。</p><p><code>defer</code> 的执行时间是在所有元素解析完成之后，<code>DOMContentLoaded</code> 事件触发之前。</p><p><code>async</code> 的执行时间是在当前JS脚本下载完成后，所以多个<code>async</code> script是执行顺序是不固定的。<code>async</code> 只能用于加载一些独立无依赖的代码，比如Google Analysis之类。</p><p><img src="/images/script-load.png" alt="script-load"></p><p>所以，一个比较好的结构如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Faster<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//cdn.com/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//cdn.com/"</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">crossorigin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"//js.cdn.com/currentPage-part1.js"</span> <span class="attr">as</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"//js.cdn.com/currentPage-part2.js"</span> <span class="attr">as</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"//js.cdn.com/currentPage-part3.js"</span> <span class="attr">as</span>=<span class="string">"script"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"//js.cdn.com/prefetch.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//js.cdn.com/currentPage-part1.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//js.cdn.com/currentPage-part2.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//js.cdn.com/currentPage-part3.js"</span> <span class="attr">defer</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h4><p>通过自定义chunks 把第三方包单独打包，来减小入口包的大小。</p><p>在<code>vue.config.js</code> 中设置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 因为是多页面，所以取消 chunks，每个页面只对应一个单独的 JS / CSS</span></span><br><span class="line">    config.optimization.splitChunks(&#123;</span><br><span class="line">      chunks: <span class="string">'all'</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        elementUI: &#123;</span><br><span class="line">          priority: <span class="number">0</span>,</span><br><span class="line">          name: <span class="string">'element-ui'</span>,</span><br><span class="line">          test: <span class="regexp">/element-ui/</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        xlsx: &#123;</span><br><span class="line">          priority: <span class="number">0</span>,</span><br><span class="line">          name: <span class="string">'xlsx'</span>,</span><br><span class="line">          test: <span class="regexp">/xlsx/</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        moment: &#123;</span><br><span class="line">          priority: <span class="number">0</span>,</span><br><span class="line">          name: <span class="string">'moment'</span>,</span><br><span class="line">          test: <span class="regexp">/moment/</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    config.optimization.runtimeChunk = &#123;</span><br><span class="line">      name: <span class="string">'manifest'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除懒加载模块的 prefetch preload，降低带宽压力</span></span><br><span class="line">    <span class="comment">// config.plugins.delete('prefetch').delete('preload')</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就像上面写的，还可以把<code>prefetch</code> 和 <code>preload</code> 删除, 来减少服务器和带宽的压力</p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>对于某些不常变动，有比价庞大的第三方库来说（例如：echarts），可以考虑使用CDN资源，来减少服务器压力。<br>如果本身服务器访问不是很友好，或者没有做过加速处理，还是可以很大程度上提高网页访问速度的。</p><p>而且 <code>webpack</code> 也支持通过配置引入外部模块导入。</p><p>具体做法是：</p><p>首先在 <code>index.html</code> 中引入 <code>echarts</code> 的外部CDN：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;!-- others --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"preload"</span> href=<span class="string">"https://cdn.bootcss.com/echarts/4.2.1/echarts.min.js"</span> <span class="keyword">as</span>=<span class="string">"script"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">  &lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- others --&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;!-- 加载echart --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">" src="</span>https:<span class="comment">//cdn.bootcss.com/echarts/4.2.1/echarts.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line">  &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>然后在 <code>vue.config.js</code> 中，做如下改动：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    externals: &#123;</span><br><span class="line">      echarts: <span class="string">'echarts'</span> <span class="comment">// echarts 从外部CDN中加载</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第三方组件按需加载"><a href="#第三方组件按需加载" class="headerlink" title="第三方组件按需加载"></a>第三方组件按需加载</h3><p>针对某些大的依赖库，如果能按需加载，也可提高网页加载速度。</p><h4 id="element-ui按需加载"><a href="#element-ui按需加载" class="headerlink" title="element-ui按需加载"></a>element-ui按需加载</h4><p><code>element-ui</code> 官网有按需加载的<a href="https://element.eleme.cn/#/zh-CN/component/quickstart" target="_blank" rel="noopener">文档</a>.<br>按照说明配置下项目。</p><p>首先，安装<code>babel-plugin-component</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure></p><p>然后修改 <code>babel.config.js</code> 文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [<span class="string">'@vue/app'</span>],</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'component'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        libraryName: <span class="string">'element-ui'</span>,</span><br><span class="line">        styleLibraryName: <span class="string">'theme-chalk'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后就是在 <code>src/main.js</code> 中按需引入组件。</p><h3 id="添加骨架屏"><a href="#添加骨架屏" class="headerlink" title="添加骨架屏"></a>添加骨架屏</h3><p>添加骨架屏能让页面更快的出现内容，提高用户体验。</p><p>例如这样的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 骨架屏的样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      body &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.mp-skeleton</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 100vh;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#f4f5f5</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.mp-skeleton-header</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 97px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>,<span class="selector-id">#132462</span>,<span class="selector-id">#0f1839</span>);</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.1</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.mp-skeleton-header__content</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="undefined">        max-width: 1200px;</span></span><br><span class="line"><span class="undefined">        margin: auto;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.mp-skeleton-header__content</span> <span class="selector-class">.mp-skeleton-bar</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>,<span class="selector-id">#0d1a48</span>,<span class="selector-id">#152a75</span>,<span class="selector-id">#0d1a48</span>);</span></span><br><span class="line"><span class="undefined">        height: 28px;</span></span><br><span class="line"><span class="undefined">        border-radius: 3px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.mp-skeleton-container</span> &#123;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        height: 120px;</span></span><br><span class="line"><span class="undefined">        max-width: 1200px;</span></span><br><span class="line"><span class="undefined">        margin: auto;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">        margin-top: 52px;</span></span><br><span class="line"><span class="undefined">        border-radius: 3px;</span></span><br><span class="line"><span class="undefined">        padding: 4px 20px;</span></span><br><span class="line"><span class="undefined">        overflow: hidden;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.mp-skeleton-bar</span> &#123;</span></span><br><span class="line"><span class="undefined">        height: 16px;</span></span><br><span class="line"><span class="undefined">        margin: 16px 0;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(90<span class="selector-tag">deg</span>,<span class="selector-id">#fff</span>,<span class="selector-id">#edeff1</span>,<span class="selector-id">#fff</span>);</span></span><br><span class="line"><span class="undefined">        background-size: 480px 480px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">animation</span>: <span class="selector-tag">skeleton-stripes-data</span> <span class="selector-class">.6s</span> <span class="selector-tag">linear</span> <span class="selector-tag">infinite</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.mp-skeleton-bar</span><span class="selector-pseudo">:first-of-type</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 40%;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.mp-skeleton-bar</span><span class="selector-pseudo">:nth-of-type(2)</span>, <span class="selector-class">.mp-skeleton-bar</span><span class="selector-pseudo">:nth-of-type(3)</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 80%;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      @-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> skeleton-stripes-data &#123;</span></span><br><span class="line"><span class="undefined">        0% &#123;</span></span><br><span class="line"><span class="undefined">          background-position: 0 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        to &#123;</span></span><br><span class="line"><span class="undefined">          background-position: 480px 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      @-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> skeleton-stripes-data &#123;</span></span><br><span class="line"><span class="undefined">        0% &#123;</span></span><br><span class="line"><span class="undefined">          background-position: 0 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        to &#123;</span></span><br><span class="line"><span class="undefined">          background-position: 480px 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      @-<span class="keyword">o</span>-<span class="keyword">keyframes</span> skeleton-stripes-data &#123;</span></span><br><span class="line"><span class="undefined">        0% &#123;</span></span><br><span class="line"><span class="undefined">          background-position: 0 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        to &#123;</span></span><br><span class="line"><span class="undefined">          background-position: 480px 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      @<span class="keyword">keyframes</span> skeleton-stripes-data &#123;</span></span><br><span class="line"><span class="undefined">        0% &#123;</span></span><br><span class="line"><span class="undefined">          background-position: 0 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        to &#123;</span></span><br><span class="line"><span class="undefined">          background-position: 480px 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We're sorry but matpool doesn't work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 骨架元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"skeleton"</span> <span class="attr">class</span>=<span class="string">"mp-skeleton"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mp-skeleton-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mp-skeleton-header__content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mp-skeleton-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mp-skeleton-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mp-skeleton-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mp-skeleton-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mp-skeleton-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://segmentfault.com/a/1190000011577248" target="_blank" rel="noopener">带你玩转prefetch, preload, dns-prefetch，defer和async</a></li><li><a href="https://github.com/fi3ework/blog/issues/32" target="_blank" rel="noopener">[译] 资源提示 —— 什么是 Preload，Prefetch 和 Preconnect？</a></li><li><a href="https://juejin.im/post/5b0033c9518825056508075f" target="_blank" rel="noopener">记一次vue+element+echarts项目的优化（如何轻松将项目性能提升70%）</a></li><li><a href="https://blog.csdn.net/jiaojiao51290/article/details/81381668" target="_blank" rel="noopener">Vue项目使用CDN优化加载</a></li><li><a href="https://segmentfault.com/a/1190000016178566#articleHeader3" target="_blank" rel="noopener">vue-cli3.0 资源加载的优化方案</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下目前了解的一些优化网页性能的方法，包括初次加载时间等。&lt;/p&gt;
&lt;h3 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h3&gt;&lt;p&gt;目前开发的项目都是 &lt;code&gt;vue&lt;/code&gt; 项目，&lt;code&gt;vue cli3&lt;/code&gt; 默认使用 &lt;code&gt;webpack&lt;/code&gt; 打包，所以从 &lt;code&gt;webpack&lt;/code&gt; 方面入手优化项目是个挺好的角度。&lt;/p&gt;
&lt;h4 id=&quot;preload-prefetch&quot;&gt;&lt;a href=&quot;#preload-prefetch&quot; class=&quot;headerlink&quot; title=&quot;preload prefetch&quot;&gt;&lt;/a&gt;preload prefetch&lt;/h4&gt;&lt;p&gt;启动一个 &lt;code&gt;vue cli3&lt;/code&gt; 创建的项目，发现在 &lt;code&gt;network&lt;/code&gt; 中多了很多的请求，特殊的请求。这些请求被归类到 &lt;code&gt;other&lt;/code&gt; 中。&lt;br&gt;而且这些资源被请求了两次。&lt;/p&gt;
&lt;p&gt;查找了下资料发现，原来是因为这些 &lt;code&gt;other&lt;/code&gt; 资源使用了 &lt;code&gt;preload&lt;/code&gt; 或 &lt;code&gt;prefetch&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那这是什么意思呢？&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="vue" scheme="https://sampwood.github.io/categories/coding/vue/"/>
    
    
      <category term="vue" scheme="https://sampwood.github.io/tags/vue/"/>
    
      <category term="性能" scheme="https://sampwood.github.io/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>微信网页开发笔记</title>
    <link href="https://sampwood.github.io/2019/08/19/wechat-web/"/>
    <id>https://sampwood.github.io/2019/08/19/wechat-web/</id>
    <published>2019-08-19T15:39:06.000Z</published>
    <updated>2019-08-19T15:45:11.569Z</updated>
    
    <content type="html"><![CDATA[<p>这几天开发了一个微信服务号，也算是入门了，纪录下其中的过程和遇到的坑。</p><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>要在微信的平台上进行开发，需要一些基础的环境。其中包括，微信公众号，服务器，域名。</p><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>域名需要备案，且需要配置在 <code>公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中</code></p><p>域名的配置需要验证一个文件，这个配置下 <code>nginx</code> 就可以了。</p><p>当然本地开发的时候是不可能时时发布的，所以可以通过修改本地 <code>host</code> 的方式来快速开发。</p><a id="more"></a><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><p>除此之外，微信提供了一个 <code>微信web开发者工具</code> （桌面应用），用于开发和调试基于微信的网页。</p><p>正常开发移动端只要在浏览器中选用 <code>响应式开发工具</code> 就可以切换到 移动端的机型。<br>所以，这个微信开发工具主要的价值是体现在<strong>它能如同微信一样获取用户授权，从而拿到部分用户信息</strong>。</p><p>要使用开发工具，还得把自己加到 <code>微信公众平台-开发-开发者工具-web开发者工具-开发者微信号</code> 中。</p><h4 id="js-sdk"><a href="#js-sdk" class="headerlink" title="js-sdk"></a>js-sdk</h4><p>和上面差不多，正常的移动端开发是用不上 <code>微信js-sdk</code> 的。</p><p>它的作用是能通过 <code>js</code> 调用一些系统的功能，例如：自定义分享内容，图像接口，地理位置等。</p><p>这次开发的功能只用到了 <code>自定义分享内容</code> 的功能。（PS：就是这个分享略坑，坑了我一天时间。后面再细说）</p><h4 id="样式库"><a href="#样式库" class="headerlink" title="样式库"></a>样式库</h4><p>微信有提供一套web样式库- <code>weui</code>，如果没有设计或者设计风格贴近微信的可以用一下，或者参考下它的组件设计。</p><p>因为这次设计风格和这个样式库差很多，而且页面也比较少。所以就都自己画了。</p><h3 id="微信网页授权"><a href="#微信网页授权" class="headerlink" title="微信网页授权"></a>微信网页授权</h3><blockquote><p>如果用户在微信客户端中访问第三方网页，公众号可以通过微信网页授权机制，来获取用户基本信息，进而实现业务逻辑。</p></blockquote><p>这边只说下前端的逻辑。</p><p>网页授权的逻辑：</p><ol><li>用户同意授权，获取code； 也就是打开特定的微信页面，然后微信会跳转到我们设定的 <code>redirect_uri</code> 上，<br>并且通过 <code>$route.query.code</code> 来返回 <code>code</code></li><li>通过 <code>code</code> 换取网页授权 <code>access_token</code>。通过 <code>access_token</code> 拉取用户信息。<br>这步是后端来实现的，所以前端只要通过调用后端接口就行了。😊</li></ol><p>用户信息包含：城市，省，国家，头像，昵称，性别，openid</p><h3 id="js-sdk-之自定义分享"><a href="#js-sdk-之自定义分享" class="headerlink" title="js-sdk 之自定义分享"></a><code>js-sdk</code> 之自定义分享</h3><blockquote><p>微信JS-SDK是微信公众平台 面向网页开发者提供的基于微信内的网页开发工具包。</p></blockquote><h4 id="js-sdk使用步骤"><a href="#js-sdk使用步骤" class="headerlink" title="js-sdk使用步骤"></a>js-sdk使用步骤</h4><ol><li>引入js文件：（支持https）：<a href="http://res.wx.qq.com/open/js/jweixin-1.4.0.js" target="_blank" rel="noopener">http://res.wx.qq.com/open/js/jweixin-1.4.0.js</a></li><li>注入权限验证配置</li></ol><blockquote><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用（同一个url仅需调用一次，对于变化url的SPA的web app可在每次url变化时进行调用)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">    appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">    timestamp: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">    jsApiList: [] <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这些数据都可以让后端生成，😊。</p><p>这里存在一个坑。对于android设备，vue项目一切正常（可能是和官网说的修复有关）。</p><p><strong>对于ios设备，vue项目的URL是不会变化的，只对第一次进入的URL能验证成功。</strong><br>当然页面fresh，是会刷新的url的。这个说的不会变化是指 <code>$router.push</code> 方法。</p><ol start="3"><li>通过ready接口处理成功验证</li><li>自定义分享内容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   <span class="comment">//需在用户可能点击分享按钮前就先调用</span></span><br><span class="line">  wx.updateAppMessageShareData(&#123; <span class="comment">// 分享到朋友</span></span><br><span class="line">    title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">    desc: <span class="string">''</span>, <span class="comment">// 分享描述</span></span><br><span class="line">    link: <span class="string">''</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">    imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 设置成功</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  wx.updateTimelineShareData(&#123; <span class="comment">// 分享到朋友圈</span></span><br><span class="line">    title: <span class="string">''</span>, <span class="comment">// 分享标题</span></span><br><span class="line">    link: <span class="string">''</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">    imgUrl: <span class="string">''</span>, <span class="comment">// 分享图标</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 设置成功</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h5 id="vue项目"><a href="#vue项目" class="headerlink" title="vue项目"></a>vue项目</h5><p>因为上面说的那个坑，所以在vue项目中，需要做一些特殊处理。</p><p>处理原理是，在最开始进入页面的时候纪录下url，然后在每次路由刷新的时候判断是<code>andriod</code>机还是<code>ios</code>机子，做不同的处理.</p><p>下面给出具体代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; wechatAuth &#125; <span class="keyword">from</span> <span class="string">'@/utils/wechatConfig.js'</span></span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> authUrl = <span class="string">`<span class="subst">$&#123;<span class="built_in">window</span>.location.origin&#125;</span><span class="subst">$&#123;to.fullPath&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.__wxjs_is_wkwebview) &#123;</span><br><span class="line">    <span class="comment">// IOS</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">window</span>.entryUrl) &#123;</span><br><span class="line">      <span class="built_in">window</span>.entryUrl = authUrl <span class="comment">// 将后面的参数去除</span></span><br><span class="line">    &#125;</span><br><span class="line">    wechatAuth(authUrl, <span class="string">'ios'</span>, to.meta.title)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 安卓</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      wechatAuth(authUrl, <span class="string">'android'</span>, to.meta.title)</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wechatAuth</span></span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'@/api'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/lib/jweixin-1.4.0.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indexOfConfig = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> updateShareData = <span class="function">(<span class="params">shareConfig, shareSuccessCallback</span>) =&gt;</span> &#123;</span><br><span class="line">  wx.updateAppMessageShareData(&#123;</span><br><span class="line">    title: shareConfig.title,</span><br><span class="line">    desc: shareConfig.desc,</span><br><span class="line">    link: shareConfig.link,</span><br><span class="line">    imgUrl: shareConfig.imgUrl,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      shareSuccessCallback()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  wx.updateTimelineShareData(&#123;</span><br><span class="line">    title: shareConfig.title,</span><br><span class="line">    link: shareConfig.link,</span><br><span class="line">    imgUrl: shareConfig.imgUrl,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      shareSuccessCallback()</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  wx.onMenuShareTimeline(&#123;</span><br><span class="line">    title: shareConfig.title,</span><br><span class="line">    link: shareConfig.link,</span><br><span class="line">    imgUrl: shareConfig.imgUrl,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      shareSuccessCallback()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  wx.onMenuShareAppMessage(&#123;</span><br><span class="line">    title: shareConfig.title,</span><br><span class="line">    desc: shareConfig.desc,</span><br><span class="line">    link: shareConfig.link,</span><br><span class="line">    imgUrl: shareConfig.imgUrl,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      shareSuccessCallback()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> wechatAuth = <span class="keyword">async</span> (authUrl, device, title, allowShare = <span class="literal">true</span>, shareSuccessCallback = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> shareConfig = &#123;</span><br><span class="line">    title: <span class="string">'title'</span>,</span><br><span class="line">    desc: <span class="string">'desc'</span>,</span><br><span class="line">    link: allowShare ? authUrl : <span class="built_in">window</span>.location.origin,</span><br><span class="line">    imgUrl: <span class="built_in">window</span>.location.origin + <span class="string">'/favicon-matpool.ico'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> params = &#123;</span><br><span class="line">    <span class="comment">// 这里在别人的代码中调用了encodeURIComponent，但我测试的结果是：没有encodeURIComponent才能正确分享。</span></span><br><span class="line">    url: device === <span class="string">'ios'</span> ? <span class="built_in">window</span>.entryUrl : authUrl </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> authRes = <span class="keyword">await</span> api.getWxConfig(params)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (authRes &amp;&amp; wx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (device !== <span class="string">'ios'</span> || indexOfConfig === <span class="number">0</span>) &#123;</span><br><span class="line">      indexOfConfig++</span><br><span class="line"></span><br><span class="line">      wx.config(&#123;</span><br><span class="line">        debug: <span class="literal">false</span>,</span><br><span class="line">        appId: authRes.app_id,</span><br><span class="line">        timestamp: authRes.timestamp,</span><br><span class="line">        nonceStr: authRes.nonce,</span><br><span class="line">        signature: authRes.signature,</span><br><span class="line">        jsApiList: [</span><br><span class="line">          <span class="string">'updateAppMessageShareData'</span>,</span><br><span class="line">          <span class="string">'updateTimelineShareData'</span>,</span><br><span class="line">          <span class="string">'onMenuShareAppMessage'</span>,</span><br><span class="line">          <span class="string">'onMenuShareTimeline'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      wx.ready(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        updateShareData(shareConfig, shareSuccessCallback)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      updateShareData(shareConfig, shareSuccessCallback)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NOTE</strong>：就是这个encodeURIComponent坑了我一天的时间。😅</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://mp.weixin.qq.com/wiki" target="_blank" rel="noopener">微信公众平台技术文档</a></li><li><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455784140" target="_blank" rel="noopener">微信web开发者工具</a></li><li><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115" target="_blank" rel="noopener">微信js-sdk</a></li><li><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455784134" target="_blank" rel="noopener">微信网页开发样式库</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天开发了一个微信服务号，也算是入门了，纪录下其中的过程和遇到的坑。&lt;/p&gt;
&lt;h3 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h3&gt;&lt;p&gt;要在微信的平台上进行开发，需要一些基础的环境。其中包括，微信公众号，服务器，域名。&lt;/p&gt;
&lt;h4 id=&quot;域名&quot;&gt;&lt;a href=&quot;#域名&quot; class=&quot;headerlink&quot; title=&quot;域名&quot;&gt;&lt;/a&gt;域名&lt;/h4&gt;&lt;p&gt;域名需要备案，且需要配置在 &lt;code&gt;公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;域名的配置需要验证一个文件，这个配置下 &lt;code&gt;nginx&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt;当然本地开发的时候是不可能时时发布的，所以可以通过修改本地 &lt;code&gt;host&lt;/code&gt; 的方式来快速开发。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="wechat" scheme="https://sampwood.github.io/categories/coding/wechat/"/>
    
    
      <category term="mobile" scheme="https://sampwood.github.io/tags/mobile/"/>
    
      <category term="vue" scheme="https://sampwood.github.io/tags/vue/"/>
    
      <category term="html5" scheme="https://sampwood.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>project 基础设置</title>
    <link href="https://sampwood.github.io/2019/05/15/project-basic-configuration/"/>
    <id>https://sampwood.github.io/2019/05/15/project-basic-configuration/</id>
    <published>2019-05-15T12:59:36.000Z</published>
    <updated>2019-10-08T10:53:38.740Z</updated>
    
    <content type="html"><![CDATA[<p>在开发项目的时候，我们要设置一些基础配置，让不同开发人员在不同环境下能写出统一规范的代码。<br>下面就记录下本人在使用的一些通用设置。</p><h3 id="eslint-prettier"><a href="#eslint-prettier" class="headerlink" title="eslint + prettier"></a>eslint + prettier</h3><p><code>eslint</code> 用来进行代码的校验，<code>prettier</code> 用于统一代码风格</p><p><code>eslint</code> 的安装和使用在之前的一篇文章中已经说明。下面介绍下 <code>prettier</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D prettier eslint-plugin-prettier eslint-config-prettier</span><br></pre></td></tr></table></figure><a id="more"></a><p><code>eslint-plugin-prettier</code> 插件会调用 <code>prettier</code> 对你的代码风格进行检查.<br>其原理是先使用 <code>prettier</code> 对你的代码进行格式化，然后与格式化之前的代码进行对比，如果过出现了不一致，这个地方就会被 <code>prettier</code> 进行标记。</p><p>通过使用 <code>eslint-config-prettier</code> 配置，能够关闭一些不必要的或者是与 <code>prettier</code> 冲突的lint选项。<br>这样我们就不会看到一些 <code>error</code> 同时出现两次。使用的时候需要确保，这个配置在 <code>extends</code> 的最后一项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.eslintrc.js</span></span><br><span class="line">&#123;</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="string">'standard'</span>, <span class="comment">//使用standard做代码规范</span></span><br><span class="line">    <span class="comment">// https://github.com/vuejs/eslint-plugin-vue#priority-a-essential-error-prevention</span></span><br><span class="line">    <span class="comment">// consider switching to `plugin:vue/strongly-recommended` or `plugin:vue/recommended` for stricter rules.</span></span><br><span class="line">    <span class="string">'plugin:vue/essential'</span>,</span><br><span class="line">    <span class="string">'plugin:prettier/recommended'</span>,</span><br><span class="line">  ],</span><br><span class="line">  plugins: [<span class="string">'prettier'</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'no-console'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line">    <span class="string">'prettier/prettier'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      &#123; <span class="comment">// prettier 配置</span></span><br><span class="line">        semi: <span class="literal">false</span>,</span><br><span class="line">        singleQuote: <span class="literal">true</span>,</span><br><span class="line">        printWidth: <span class="number">120</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NOTE: 配置方法有好几种，本人在 <code>.eslintrc.js</code> 中对 <code>prettier</code> 进行配置</strong></p><h3 id="husky-lint-staged"><a href="#husky-lint-staged" class="headerlink" title="husky + lint-staged"></a>husky + lint-staged</h3><p>这个在之前的文章中有介绍。</p><p>当然，现在 <code>husky</code> 在 <code>package.json</code> 提供了额外的配置参数 <code>husky</code>，而不是在 <code>script</code> 中写 <code>precommit</code></p><h3 id="Commitizen-Commitlint"><a href="#Commitizen-Commitlint" class="headerlink" title="Commitizen + Commitlint"></a>Commitizen + Commitlint</h3><p>用这两个插件来让你的 git commit message 更加的规范和统一。<br><code>Commitizen</code> 是一套模版化的commit message, <code>Commitlint</code> 用来检查commit message 是否符合制定模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -D commitizen cz-customizable</span><br><span class="line">npm install -D commitlint-config-cz @commitlint/cli @commitlint/config-conventional</span><br></pre></td></tr></table></figure><p>结合 <code>husky</code> 插件就能拥有同样的 <code>git commit</code> 命令，不一样的体验，而不是使用 <code>git cz</code>命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"husky"</span>: &#123;</span><br><span class="line">    <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">      <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span>,</span><br><span class="line">      <span class="attr">"prepare-commit-msg"</span>: <span class="string">"exec &lt; /dev/tty &amp;&amp; git cz --hook"</span>,</span><br><span class="line">      <span class="attr">"commit-msg"</span>: <span class="string">"commitlint -E HUSKY_GIT_PARAMS"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="attr">"src/**/*.&#123;js,vue&#125;"</span>: [</span><br><span class="line">      <span class="string">"eslint --fix"</span>,</span><br><span class="line">      <span class="string">"git add"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"commitizen"</span>: &#123;</span><br><span class="line">      <span class="attr">"path"</span>: <span class="string">"cz-customizable"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>额外需要增加下面这些文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .cz-config.js</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"></span><br><span class="line">  types: [</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'WIP'</span>,</span><br><span class="line">      name : <span class="string">'💪  WIP:      Work in progress'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'feat'</span>,</span><br><span class="line">      name : <span class="string">'✨  feat:     A new feature'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'fix'</span>,</span><br><span class="line">      name : <span class="string">'🐞  fix:      A bug fix'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'refactor'</span>,</span><br><span class="line">      name : <span class="string">'🛠  refactor: A code change that neither fixes a bug nor adds a feature'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'docs'</span>,</span><br><span class="line">      name : <span class="string">'📚  docs:     Documentation only changes'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'test'</span>,</span><br><span class="line">      name : <span class="string">'🏁  test:     Add missing tests or correcting existing tests'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'chore'</span>,</span><br><span class="line">      name : <span class="string">'🗯  chore:    Changes that don\'t modify src or test files. Such as updating build tasks, package manager'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'style'</span>,</span><br><span class="line">      name : <span class="string">'💅  style:    Code Style, Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      value: <span class="string">'revert'</span>,</span><br><span class="line">      name : <span class="string">'⏪  revert:   Revert to a commit'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  scopes: [],</span><br><span class="line"></span><br><span class="line">  allowCustomScopes: <span class="literal">true</span>,</span><br><span class="line">  allowBreakingChanges: [<span class="string">"feat"</span>, <span class="string">"fix"</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .commitlintrc.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [<span class="string">'@commitlint/config-conventional'</span>, <span class="string">'cz'</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'type-enum'</span>: [<span class="number">2</span>, <span class="string">'always'</span>, [<span class="string">'WIP'</span>, <span class="string">'feat'</span>, <span class="string">'fix'</span>, <span class="string">'refactor'</span>, <span class="string">'docs'</span>, <span class="string">'test'</span>, <span class="string">'chore'</span>, <span class="string">'style'</span>, <span class="string">'revert'</span>]],</span><br><span class="line">    <span class="string">'type-case'</span>: [<span class="number">0</span>, <span class="string">'never'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="standard-version"><a href="#standard-version" class="headerlink" title="standard-version"></a>standard-version</h3><p>如果使用上面的插件来规范我们的git commit message，<br>那么我们就可以借助 standard-version 这样的工具, 自动生成 CHANGELOG, 甚至是 语义化的版本号(Semantic Version).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D standard-version</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 中配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scirpt"</span>: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    "release": "HUSKY_SKIP_HOOKS=1 standard-version"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Note</strong>: <code>HUSKY_SKIP_HOOKS=1</code> 用于取消husky中第二个hook（<code>prepare-commit-msg</code>）,这个需要<code>husky</code>升级到<code>3.0.0</code>版本以上</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://juejin.im/post/5b27a326e51d45588a7dac57" target="_blank" rel="noopener">使用ESLint+Prettier来统一前端代码风格</a></li><li><a href="https://juejin.im/post/5afc5242f265da0b7f44bee4#heading-7" target="_blank" rel="noopener">优雅的提交你的 Git Commit Message</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发项目的时候，我们要设置一些基础配置，让不同开发人员在不同环境下能写出统一规范的代码。&lt;br&gt;下面就记录下本人在使用的一些通用设置。&lt;/p&gt;
&lt;h3 id=&quot;eslint-prettier&quot;&gt;&lt;a href=&quot;#eslint-prettier&quot; class=&quot;headerlink&quot; title=&quot;eslint + prettier&quot;&gt;&lt;/a&gt;eslint + prettier&lt;/h3&gt;&lt;p&gt;&lt;code&gt;eslint&lt;/code&gt; 用来进行代码的校验，&lt;code&gt;prettier&lt;/code&gt; 用于统一代码风格&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eslint&lt;/code&gt; 的安装和使用在之前的一篇文章中已经说明。下面介绍下 &lt;code&gt;prettier&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i -D prettier eslint-plugin-prettier eslint-config-prettier&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
    
      <category term="environment" scheme="https://sampwood.github.io/tags/environment/"/>
    
  </entry>
  
  <entry>
    <title>npm scripts设置环境变量方法</title>
    <link href="https://sampwood.github.io/2019/04/01/npm-scripts%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%96%B9%E6%B3%95/"/>
    <id>https://sampwood.github.io/2019/04/01/npm-scripts设置环境变量方法/</id>
    <published>2019-04-01T00:59:06.000Z</published>
    <updated>2019-04-01T01:07:24.544Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>package.json</code> 中，如果希望在 <code>script</code> 属性的运行脚本中设置环境变量，来区分开发环境 或 生产环境。<br>unix与windows环境的设置方式是不同的。<br>这个不同可以通过<code>cross-env</code>来实现跨平台设置。</p><a id="more"></a><p>windows:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set NODE_ENV=production</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;set NODE_ENV=production &amp;&amp; npm run build&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;set NODE_ENV=development &amp;&amp; npm run dev&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>linux &amp; mac:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export NODE_ENV=production</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;NODE_ENV=production npm run build&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;NODE_ENV=development npm run dev&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>cross-env跨平台设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i cross-env -D</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;cross-env NODE_ENV=production npm run build&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;cross-env NODE_ENV=development npm run dev&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.cnblogs.com/mengff/p/7350030.html" target="_blank" rel="noopener">npm scripts设置环境变量方法</a></li><li><a href="https://www.jianshu.com/p/60c4ce9111c0" target="_blank" rel="noopener">package.json里script设置环境变量，unix与windows的区别</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;package.json&lt;/code&gt; 中，如果希望在 &lt;code&gt;script&lt;/code&gt; 属性的运行脚本中设置环境变量，来区分开发环境 或 生产环境。&lt;br&gt;unix与windows环境的设置方式是不同的。&lt;br&gt;这个不同可以通过&lt;code&gt;cross-env&lt;/code&gt;来实现跨平台设置。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="js" scheme="https://sampwood.github.io/categories/coding/js/"/>
    
    
      <category term="linux" scheme="https://sampwood.github.io/tags/linux/"/>
    
      <category term="environment" scheme="https://sampwood.github.io/tags/environment/"/>
    
      <category term="npm" scheme="https://sampwood.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>indexDB的使用</title>
    <link href="https://sampwood.github.io/2019/02/28/%E6%B5%8F%E8%A7%88%E5%99%A8indexDB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://sampwood.github.io/2019/02/28/浏览器indexDB的使用/</id>
    <published>2019-02-28T06:27:33.000Z</published>
    <updated>2019-03-06T05:51:53.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>现代浏览器提供了一些数据存储方案，例如<code>cookie</code>、<code>sessionStorage</code>、<code>localStorage</code>和<code>indexedDB</code>。</p><p>这些都能在浏览器开发工具的<code>application</code>标签页中能看到。</p><p>在这里记录下，<code>indexedDB</code>的基本用法。</p><blockquote><p>通俗地说，<code>IndexedDB</code> 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。<br><code>IndexedDB</code> 允许储存大量数据，提供查找接口，还能建立索引。<br>这些都是 <code>LocalStorage</code> 所不具备的。<br>就数据库类型而言，<code>IndexedDB</code> 不属于关系型数据库（不支持 <code>SQL</code> 查询语句），更接近 <code>NoSQL</code> 数据库。</p></blockquote><a id="more"></a><blockquote><p>IndexedDB 具有以下特点。<br>（1）<strong>键值对储存</strong> IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以”键值对”的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。<br>（2）<strong>异步</strong> IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。<br>（3）<strong>支持事务</strong> IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。<br>（4）<strong>同源限制</strong> IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。<br>（5）<strong>储存空间大</strong> IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。<br>（6）<strong>支持二进制储存</strong> IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>数据库：IDBDatabase 对象</li><li>对象仓库：IDBObjectStore 对象</li><li>索引： IDBIndex 对象</li><li>事务： IDBTransaction 对象</li><li>操作请求：IDBRequest 对象</li><li>指针： IDBCursor 对象</li><li>主键集合：IDBKeyRange 对象</li></ul><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><p>一个基本的<code>indexDB</code>流程是这样的：</p><ol><li>打开数据库</li><li>在这个数据库中创建对象仓库</li><li>开启事务，并发起数据库操作请求</li><li>监听特定事件，等待操作完成</li><li>对返回结果进行处理</li></ol><h4 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> db</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">require</span> = <span class="built_in">window</span>.indexedDB.open(databaseName, version)</span><br><span class="line"></span><br><span class="line">request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'数据库打开报错'</span>)</span><br><span class="line">&#125;</span><br><span class="line">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'数据库打开成功'</span>)</span><br><span class="line">  db = event.target.result</span><br><span class="line">&#125;</span><br><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'数据库升级成功'</span>)</span><br><span class="line">  db = event.target.result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>window.indexedDB.open</code>方法接受两个参数，<br>第一个参数是字符串，表示数据库的名字。如果指定的数据库不存在，就会新建数据库。<br>第二个参数是整数，表示数据库的版本。<br>如果省略，打开已有数据库时，默认为当前版本；新建数据库时，默认为1。<br>如果指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件<code>onupgradeneeded</code>。</p><p><strong>Note: 数据库升级成功之后会调用<code>onsuccess</code>的回调</strong></p><h4 id="新建对象仓库"><a href="#新建对象仓库" class="headerlink" title="新建对象仓库"></a>新建对象仓库</h4><p>新建/删除/更新对象仓库只能在数据库升级的回调函数中，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This event is only implemented in recent browsers   </span></span><br><span class="line">request.onupgradeneeded = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// Save the IDBDatabase interface </span></span><br><span class="line">  db = event.target.result;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create an objectStore for this database</span></span><br><span class="line">  <span class="keyword">const</span> objectStore = db.createObjectStore(<span class="string">"name"</span>, &#123; <span class="attr">keyPath</span>: <span class="string">"myKey"</span> &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>主键（key）是默认建立索引的属性。<br>比如，数据记录是<code>{ id: 1, name: &#39;张三&#39; }</code>，那么<code>id</code>属性可以作为主键。<br>主键也可以指定为下一层对象的属性，比如<code>{ foo: { bar: &#39;baz&#39; } }</code>的<code>foo.bar</code>也可以指定为主键。</p><p>如果要指定主键为一个递增的整数，可以用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createObjectStore(&quot;name&quot;, &#123; keyPath: &quot;myKey&quot;, autoIncrement: true &#125;)</span><br></pre></td></tr></table></figure></p><p>如果要创建索引：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objectStore.createIndex(&apos;name&apos;, &apos;name&apos;, &#123; unique: false &#125;);</span><br><span class="line">objectStore.createIndex(&apos;email&apos;, &apos;email&apos;, &#123; unique: true &#125;);</span><br></pre></td></tr></table></figure></p><h4 id="开启事务，数据库操作"><a href="#开启事务，数据库操作" class="headerlink" title="开启事务，数据库操作"></a>开启事务，数据库操作</h4><p>开启事务的方法是<code>IDBDatabase.transaction([&#39;person&#39;], &#39;readwrite&#39;)</code>。<br>其中<code>person</code>是对象仓库名，第二个参数指明读写权限：<code>&#39;readwrite&#39;/&#39;readonly&#39;</code>。</p><p>开启事务之后通过<code>IDBTransaction.objectStore(name)</code>，拿到 <code>IDBObjectStore</code> 对象。<br>在这个对象上调用增删改查的方法。</p><p><strong>Note: 当一次事务需要对数据库进行多次操作的时候，就要监听事务的回调<code>oncomplete</code>和<code>onerror</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Do something when all the data is added to the database.</span></span><br><span class="line">transaction.oncomplete = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"All done!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">transaction.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Don't forget to handle errors!</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectStore = transaction.objectStore(<span class="string">"customers"</span>);</span><br><span class="line">customerData.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">customer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> request = objectStore.add(customer);</span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// event.target.result === customer.ssn;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> request = db.transaction([<span class="string">'person'</span>], <span class="string">'readwrite'</span>)</span><br><span class="line">    .objectStore(<span class="string">'person'</span>)</span><br><span class="line">    .add(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">email</span>: <span class="string">'zhangsan@example.com'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据写入成功'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据写入失败'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add();</span><br></pre></td></tr></table></figure><h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> request = db.transaction([<span class="string">'person'</span>], <span class="string">'readwrite'</span>)</span><br><span class="line">    .objectStore(<span class="string">'person'</span>)</span><br><span class="line">    .delete(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据删除成功'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">remove();</span><br></pre></td></tr></table></figure><p><strong>Note: delete方法的参数是主键值</strong></p><h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> request = db.transaction([<span class="string">'person'</span>], <span class="string">'readwrite'</span>)</span><br><span class="line">    .objectStore(<span class="string">'person'</span>)</span><br><span class="line">    .put(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'李四'</span>, <span class="attr">age</span>: <span class="number">35</span>, <span class="attr">email</span>: <span class="string">'lisi@example.com'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据更新成功'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  request.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'数据更新失败'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">update();</span><br></pre></td></tr></table></figure><p><strong>Note: put方法是按照主键值来进行更新。</strong></p><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> transaction = db.transaction([<span class="string">'person'</span>]);</span><br><span class="line">   <span class="keyword">const</span> objectStore = transaction.objectStore(<span class="string">'person'</span>);</span><br><span class="line">   <span class="keyword">const</span> request = objectStore.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   request.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'查询失败'</span>);</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   request.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params"> event</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (request.result) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Name: '</span> + request.result.name);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Age: '</span> + request.result.age);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Email: '</span> + request.result.email);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'未获得数据记录'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read();</span><br></pre></td></tr></table></figure><p><strong>Note: get方法的参数是主键值</strong></p><h4 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h4><p>索引的意义在于，可以让你搜索任意字段，也就是说从任意字段拿到数据记录。如果不建立索引，默认只能搜索主键（即从主键取值）。</p><p>在上面，我们对<code>name</code>和<code>email</code>建立了索引。<br>现在，就可以从<code>name</code>找到对应的数据记录了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transaction = db.transaction([<span class="string">'person'</span>], <span class="string">'readonly'</span>);</span><br><span class="line"><span class="keyword">const</span> store = transaction.objectStore(<span class="string">'person'</span>);</span><br><span class="line"><span class="keyword">const</span> index = store.index(<span class="string">'name'</span>);</span><br><span class="line"><span class="keyword">const</span> request = index.get(<span class="string">'李四'</span>);</span><br><span class="line"></span><br><span class="line">request.onsuccess = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = e.target.result;</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Note: 因为’name’索引设置成不是唯一的，所以有可能会出现重名。这种情况只会返回一条数据（key最小的数据）。如果想要获取所有的数据，可以使用下面所说的游标</strong></p><h4 id="游标（cursor）的使用"><a href="#游标（cursor）的使用" class="headerlink" title="游标（cursor）的使用"></a>游标（cursor）的使用</h4><p>当需要遍历数据库所有数据的时候，可以使用游标（cursor）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectStore = db.transaction(<span class="string">"customers"</span>).objectStore(<span class="string">"customers"</span>);</span><br><span class="line"></span><br><span class="line">objectStore.openCursor().onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cursor = event.target.result;</span><br><span class="line">  <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">    alert(<span class="string">"Name for SSN "</span> + cursor.key + <span class="string">" is "</span> + cursor.value.name);</span><br><span class="line">    cursor.continue();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"No more entries!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>Note: 如果只是想获取到所有的数据，可以使用<code>objectStore.getAll()</code>或<code>objectStore.getAllKeys()</code></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objectStore.getAll().onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Got all customers: "</span> + event.target.result);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>同样，索引也可以使用游标:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用普通的游标，会获取整个数据对象</span></span><br><span class="line">index.openCursor().onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cursor = event.target.result;</span><br><span class="line">  <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">    <span class="comment">// cursor.key is a name, like "Bill", and cursor.value is the whole object.</span></span><br><span class="line">    alert(<span class="string">"Name: "</span> + cursor.key + <span class="string">", SSN: "</span> + cursor.value.ssn + <span class="string">", email: "</span> + cursor.value.email);</span><br><span class="line">    cursor.continue();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用key游标，会获取数据对象的key</span></span><br><span class="line">index.openKeyCursor().onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cursor = event.target.result;</span><br><span class="line">  <span class="keyword">if</span> (cursor) &#123;</span><br><span class="line">    <span class="comment">// cursor.key is a name, like "Bill", and cursor.value is the SSN.</span></span><br><span class="line">    <span class="comment">// No way to directly get the rest of the stored object.</span></span><br><span class="line">    alert(<span class="string">"Name: "</span> + cursor.key + <span class="string">", SSN: "</span> + cursor.primaryKey);</span><br><span class="line">    cursor.continue();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://www.ruanyifeng.com/blog/2018/07/indexeddb.html" target="_blank" rel="noopener">浏览器数据库 IndexedDB 入门教程</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB" target="_blank" rel="noopener">Using IndexedDB</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;现代浏览器提供了一些数据存储方案，例如&lt;code&gt;cookie&lt;/code&gt;、&lt;code&gt;sessionStorage&lt;/code&gt;、&lt;code&gt;localStorage&lt;/code&gt;和&lt;code&gt;indexedDB&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这些都能在浏览器开发工具的&lt;code&gt;application&lt;/code&gt;标签页中能看到。&lt;/p&gt;
&lt;p&gt;在这里记录下，&lt;code&gt;indexedDB&lt;/code&gt;的基本用法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通俗地说，&lt;code&gt;IndexedDB&lt;/code&gt; 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。&lt;br&gt;&lt;code&gt;IndexedDB&lt;/code&gt; 允许储存大量数据，提供查找接口，还能建立索引。&lt;br&gt;这些都是 &lt;code&gt;LocalStorage&lt;/code&gt; 所不具备的。&lt;br&gt;就数据库类型而言，&lt;code&gt;IndexedDB&lt;/code&gt; 不属于关系型数据库（不支持 &lt;code&gt;SQL&lt;/code&gt; 查询语句），更接近 &lt;code&gt;NoSQL&lt;/code&gt; 数据库。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="js" scheme="https://sampwood.github.io/categories/coding/js/"/>
    
    
      <category term="浏览器" scheme="https://sampwood.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>代码检查工作流之husky+lint-staged</title>
    <link href="https://sampwood.github.io/2019/02/28/husky-lint-staged/"/>
    <id>https://sampwood.github.io/2019/02/28/husky-lint-staged/</id>
    <published>2019-02-28T06:13:09.000Z</published>
    <updated>2019-03-06T05:51:53.737Z</updated>
    
    <content type="html"><![CDATA[<p>虽然大家都会在项目中使用eslint等工具来进行代码格式检查。<br>但如果每次都手动去跑<code>npm run lint</code>是一件很麻烦的事情，而且很容易忘记。</p><p>那么，有没有办法解决这个问题呢？</p><p>在这里我用这个办法：在<code>git commit</code>的时候来自动跑eslint来检查代码。</p><p>需要的工具是： <code>husky</code> + <code>lint-staged</code></p><p><code>husky</code>的作用是提供<code>git commit hook</code>，<code>lint-staged</code>的作用是让eslint的范围限定在本次的改动文件中。</p><a id="more"></a><h3 id="配置husky-lint-staged"><a href="#配置husky-lint-staged" class="headerlink" title="配置husky+lint-staged"></a>配置<code>husky</code>+<code>lint-staged</code></h3><p>安装插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D husky lint-staged</span><br></pre></td></tr></table></figure></p><p>修改<code>package.json</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;precommit&quot;: &quot;lint-staged&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;lint-staged&quot;: &#123;</span><br><span class="line">    &quot;src/**/*.js&quot;: &quot;eslint&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://segmentfault.com/a/1190000009546913" target="_blank" rel="noopener">用 husky 和 lint-staged 构建超溜的代码检查工作流</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然大家都会在项目中使用eslint等工具来进行代码格式检查。&lt;br&gt;但如果每次都手动去跑&lt;code&gt;npm run lint&lt;/code&gt;是一件很麻烦的事情，而且很容易忘记。&lt;/p&gt;
&lt;p&gt;那么，有没有办法解决这个问题呢？&lt;/p&gt;
&lt;p&gt;在这里我用这个办法：在&lt;code&gt;git commit&lt;/code&gt;的时候来自动跑eslint来检查代码。&lt;/p&gt;
&lt;p&gt;需要的工具是： &lt;code&gt;husky&lt;/code&gt; + &lt;code&gt;lint-staged&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;husky&lt;/code&gt;的作用是提供&lt;code&gt;git commit hook&lt;/code&gt;，&lt;code&gt;lint-staged&lt;/code&gt;的作用是让eslint的范围限定在本次的改动文件中。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="linter" scheme="https://sampwood.github.io/categories/coding/linter/"/>
    
    
      <category term="environment" scheme="https://sampwood.github.io/tags/environment/"/>
    
      <category term="eslint" scheme="https://sampwood.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>ssh的使用和配置</title>
    <link href="https://sampwood.github.io/2019/02/28/ssh%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://sampwood.github.io/2019/02/28/ssh的使用和配置/</id>
    <published>2019-02-28T05:55:00.000Z</published>
    <updated>2019-03-28T01:17:58.778Z</updated>
    
    <content type="html"><![CDATA[<h3 id="检查已经存在的ssh-keys"><a href="#检查已经存在的ssh-keys" class="headerlink" title="检查已经存在的ssh keys"></a>检查已经存在的ssh keys</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br></pre></td></tr></table></figure><h3 id="新建ssh-key"><a href="#新建ssh-key" class="headerlink" title="新建ssh key"></a>新建ssh key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><h4 id="使用ssh-agent来管理ssh-key"><a href="#使用ssh-agent来管理ssh-key" class="headerlink" title="使用ssh-agent来管理ssh key"></a>使用ssh-agent来管理ssh key</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> $(ssh-agent -s)</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="修改ssh-key的密码"><a href="#修改ssh-key的密码" class="headerlink" title="修改ssh key的密码"></a>修改ssh key的密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f ~/.ssh/id_rsa -p</span><br></pre></td></tr></table></figure><h3 id="配置不同的host使用不同的ssh"><a href="#配置不同的host使用不同的ssh" class="headerlink" title="配置不同的host使用不同的ssh"></a>配置不同的host使用不同的ssh</h3><p>在<code>~/.ssh</code>文件夹下，新建<code>config</code>文件并写入下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Host xxx.com</span><br><span class="line">  HostName 192.168.1.1</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  IdentitiesOnly yes</span><br><span class="line">Host github.com</span><br><span class="line">  HostName github.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/sampwood_id_rsa</span><br><span class="line">  IdentitiesOnly yes</span><br><span class="line">Host gitlab.com</span><br><span class="line">  HostName gitlab.com</span><br><span class="line">  User git</span><br><span class="line">  IdentityFile ~/.ssh/sampwood_id_rsa</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://help.github.com/en/articles/connecting-to-github-with-ssh" target="_blank" rel="noopener">Connecting to GitHub with SSH</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;检查已经存在的ssh-keys&quot;&gt;&lt;a href=&quot;#检查已经存在的ssh-keys&quot; class=&quot;headerlink&quot; title=&quot;检查已经存在的ssh keys&quot;&gt;&lt;/a&gt;检查已经存在的ssh keys&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ls -al ~/.ssh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;新建ssh-key&quot;&gt;&lt;a href=&quot;#新建ssh-key&quot; class=&quot;headerlink&quot; title=&quot;新建ssh key&quot;&gt;&lt;/a&gt;新建ssh key&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -b 4096 -C &lt;span class=&quot;string&quot;&gt;&quot;your_email@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;使用ssh-agent来管理ssh-key&quot;&gt;&lt;a href=&quot;#使用ssh-agent来管理ssh-key&quot; class=&quot;headerlink&quot; title=&quot;使用ssh-agent来管理ssh key&quot;&gt;&lt;/a&gt;使用ssh-agent来管理ssh key&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt; $(ssh-agent -s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh-add ~/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
    
      <category term="environment" scheme="https://sampwood.github.io/tags/environment/"/>
    
  </entry>
  
  <entry>
    <title>节流和防抖</title>
    <link href="https://sampwood.github.io/2019/01/11/%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/"/>
    <id>https://sampwood.github.io/2019/01/11/节流和防抖/</id>
    <published>2019-01-11T06:21:07.000Z</published>
    <updated>2019-03-06T05:51:53.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>函数防抖（debounce）</strong></p><blockquote><p>当调用动作过n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间</p></blockquote><p><strong>函数节流（throttle）</strong></p><blockquote><p>预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期</p></blockquote><p><strong>函数节流（throttle）</strong>与 <strong>函数防抖（debounce）</strong>都是为了限制函数的执行频次，<br>以优化函数触发频率过高导致的响应速度跟不上触发频率，出现延迟，假死或卡顿的现象。</p><a id="more"></a><p>常用的场景有：</p><ul><li>window对象的resize、scroll事件</li><li>拖拽时的mousemove事件</li><li>文字输入、自动完成的keyup事件 </li></ul><p><strong>话句话来说这两者的区别就是，是否在动作持续的过程中，重新计算过期时间。</strong></p><p>防抖 只会在动作“真正结束”后才触发函数，节流 会在超过预定时候后就会触发函数</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>函数防抖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> context = <span class="keyword">this</span></span><br><span class="line">      <span class="keyword">var</span> args = <span class="built_in">arguments</span></span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">          clearTimeout(timer);</span><br><span class="line">          timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          fn.apply(context, args)</span><br><span class="line">      &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'boom'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(debounce(fn,<span class="number">500</span>),<span class="number">1000</span>) <span class="comment">// 第一次在1500ms后触发，之后每1000ms触发一次</span></span><br><span class="line"></span><br><span class="line">setInterval(debounce(fn,<span class="number">2000</span>),<span class="number">1000</span>) <span class="comment">// 不会触发一次（我把函数防抖看出技能读条，如果读条没完成就用技能，便会失败而且重新读条）</span></span><br></pre></td></tr></table></figure><p>函数节流：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, gapTime</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _lastTime = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _nowTime = + <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">if</span> (_nowTime - _lastTime &gt; gapTime || !_lastTime) &#123;</span><br><span class="line">      fn();</span><br><span class="line">      _lastTime = _nowTime</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'boom'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setInterval(throttle(fn,<span class="number">1000</span>),<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://segmentfault.com/a/1190000008768202" target="_blank" rel="noopener">函数节流与函数防抖</a></li><li><a href="https://juejin.im/post/5a35ed25f265da431d3cc1b1" target="_blank" rel="noopener">轻松理解JS函数节流和函数防抖</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;函数防抖（debounce）&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当调用动作过n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;函数节流（throttle）&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;函数节流（throttle）&lt;/strong&gt;与 &lt;strong&gt;函数防抖（debounce）&lt;/strong&gt;都是为了限制函数的执行频次，&lt;br&gt;以优化函数触发频率过高导致的响应速度跟不上触发频率，出现延迟，假死或卡顿的现象。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="js" scheme="https://sampwood.github.io/categories/coding/js/"/>
    
    
      <category term="utils" scheme="https://sampwood.github.io/tags/utils/"/>
    
  </entry>
  
  <entry>
    <title>跨域问题</title>
    <link href="https://sampwood.github.io/2019/01/08/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://sampwood.github.io/2019/01/08/跨域问题/</id>
    <published>2019-01-08T02:22:54.000Z</published>
    <updated>2019-03-06T05:51:53.743Z</updated>
    
    <content type="html"><![CDATA[<p>跨域在前端是个很常见的场景。<br>首先，我们先来了解下什么是跨域，什么情况下出现跨域。</p><h3 id="概念以及场景"><a href="#概念以及场景" class="headerlink" title="概念以及场景"></a>概念以及场景</h3><p>跨域的始作俑者是<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">同源策略</a>:</p><blockquote><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p></blockquote><p>换句话说就是，浏览器限制了，我们在一个页面下面去调用另外一个源的资源。<br>最常见的场景是我们在当前页面下调用了另一个源的接口。结果浏览器直接报错了，说不行，不能这样干。</p><p>下面是同源的定义：</p><blockquote><p>如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源。</p></blockquote><a id="more"></a><h4 id="造成跨域的两种策略"><a href="#造成跨域的两种策略" class="headerlink" title="造成跨域的两种策略"></a>造成跨域的两种策略</h4><p>浏览器的同源策略会导致跨域，这里同源策略又分为以下两种</p><ol><li>DOM同源策略：禁止对不同源页面DOM进行操作。这里主要场景是iframe跨域的情况，不同域名的iframe是限制互相访问的。</li><li>XmlHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起HTTP请求。</li></ol><h3 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h3><p>跨域的问题是有解决方案的。</p><h4 id="跨域资源共享"><a href="#跨域资源共享" class="headerlink" title="跨域资源共享"></a>跨域资源共享</h4><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。 对于这个方式，阮一峰老师总结的文章特别好，希望深入了解的可以看一下<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html。" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html。</a></p><h4 id="jsnop"><a href="#jsnop" class="headerlink" title="jsnop"></a>jsnop</h4><p>利用 “在HTML标签里，一些标签比如script、img这样的获取资源的标签是没有跨域限制的” 来实现跨域</p><h4 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h4><h4 id="document-domain来跨子域"><a href="#document-domain来跨子域" class="headerlink" title="document.domain来跨子域"></a>document.domain来跨子域</h4><p>对于主域名相同，而子域名不同的情况，可以使用document.domain来跨域 这种方式非常适用于iframe跨域的情况。</p><h4 id="window-name进行跨域"><a href="#window-name进行跨域" class="headerlink" title="window.name进行跨域"></a>window.name进行跨域</h4><p>window.name跨域同样是受到同源策略限制，父框架和子框架的src必须指向统一域名。<br>window.name的优势在于，name的值在不同的页面(或者不同的域名)，加载后仍然存在，除非你显示的更改。并且支持的长度达到2M.</p><h4 id="location-hash跨域"><a href="#location-hash跨域" class="headerlink" title="location.hash跨域"></a>location.hash跨域</h4><p>location.hash方式跨域，是子框架具有修改父框架src的hash值，通过这个属性进行传递数据，且更改hash值，页面不会刷新。<br>但是传递的数据的字节数是有限的。</p><blockquote><p>补充： 其实还有一些方法，比如window.name和location.hash。<br>就很适用于iframe的跨域，不过iframe用的比较少了，所以这些方法也就有点过时了。</p></blockquote><h4 id="使用postMessage实现页面之间通信"><a href="#使用postMessage实现页面之间通信" class="headerlink" title="使用postMessage实现页面之间通信"></a>使用postMessage实现页面之间通信</h4><p>window.postMessage是一个HTML5的api，允许两个窗口之间进行跨域发送消息。<br>这个应该就是以后解决dom跨域通用方法了，具体可以参照MDN。</p><h3 id="一些实用方法"><a href="#一些实用方法" class="headerlink" title="一些实用方法"></a>一些实用方法</h3><ul><li>跨域下获取iframe的父页面URL：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getParentHost = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> host = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (parent !== <span class="built_in">window</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      host = parent.location.origin;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">const</span> url = <span class="built_in">document</span>.referrer;</span><br><span class="line">      host = url.split(<span class="string">'/'</span>).splice(<span class="number">0</span>, <span class="number">3</span>).join(<span class="string">'/'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> host;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/28562290" target="_blank" rel="noopener">跨域的那些事儿</a></li><li><a href="https://www.jianshu.com/p/06529543f03a" target="_blank" rel="noopener">前端跨域整理</a></li><li><a href="https://segmentfault.com/a/1190000015597029" target="_blank" rel="noopener">不要再问我跨域的问题了</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跨域在前端是个很常见的场景。&lt;br&gt;首先，我们先来了解下什么是跨域，什么情况下出现跨域。&lt;/p&gt;
&lt;h3 id=&quot;概念以及场景&quot;&gt;&lt;a href=&quot;#概念以及场景&quot; class=&quot;headerlink&quot; title=&quot;概念以及场景&quot;&gt;&lt;/a&gt;概念以及场景&lt;/h3&gt;&lt;p&gt;跨域的始作俑者是&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;同源策略&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;换句话说就是，浏览器限制了，我们在一个页面下面去调用另外一个源的资源。&lt;br&gt;最常见的场景是我们在当前页面下调用了另一个源的接口。结果浏览器直接报错了，说不行，不能这样干。&lt;/p&gt;
&lt;p&gt;下面是同源的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="http" scheme="https://sampwood.github.io/categories/coding/http/"/>
    
    
      <category term="跨域" scheme="https://sampwood.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>git多平台换行符问题(LF/CRLF)</title>
    <link href="https://sampwood.github.io/2019/01/07/git%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%8D%A2%E8%A1%8C%E7%AC%A6%E9%97%AE%E9%A2%98-LF-CRLF/"/>
    <id>https://sampwood.github.io/2019/01/07/git多平台换行符问题-LF-CRLF/</id>
    <published>2019-01-07T08:51:29.000Z</published>
    <updated>2019-03-06T05:51:53.735Z</updated>
    
    <content type="html"><![CDATA[<h3 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h3><p>目前大部分的前端开发用macos/windows来开发，linux系统使用的较少。<br>一个多人开发的项目必然会覆盖windows和unix系统。<br>而这个两个系统间存在一些差异，其中之一就是文本换行的方式。</p><p>CRLF, LF 都是用来表示文本换行的方式。主流的操作系统一般使用CRLF或者LF作为其文本的换行符。<br>CR(Carriage Return) 代表回车，对应字符 <code>\r</code>；LF(Line Feed) 代表换行，对应字符 <code>\n</code>。</p><p>unix/linux(macos)使用的是LF，windows使用的是CRLF。</p><p>跨平台协作开发是常有的，不统一的换行符确实对跨平台的文件交换带来了麻烦。<br>最大的问题是，在不同平台上，换行符发生改变时，Git 会认为整个文件被修改，这就造成我们 <code>diff</code> 不能正确反映本次的修改。</p><p>例如在查看<code>diff</code>的时候，出现下面的情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">warning: LF will be replaced by CRLF in .gitignore.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in README.md.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="git处理"><a href="#git处理" class="headerlink" title="git处理"></a>git处理</h3><p>还好 Git 在设计时就考虑了这一点，提供了换行符相关的处理方式。</p><p>这里先指定两个非官方的概念，方便后面解释与描述：(重要，否则后面看不懂)</p><ol><li><strong>标准化</strong> 指在提交代码到git数据库(本地库) 中将文本文件中的换行符CRLF转为LF的过程</li><li><strong>转换</strong> 指在检出Git数据库代码过程中将文本文件中的换行符LF转换为CRLF的过程</li></ol><h4 id="core-autocrlf"><a href="#core-autocrlf" class="headerlink" title="core.autocrlf"></a>core.autocrlf</h4><p>git提供了一个 <code>autocrlf</code> 的配置项，用于在提交和检出时自动转换换行符，该配置有三个可选项：</p><ul><li>true: 提交时转换为 LF，检出时转换为 CRLF</li><li>false: 提交检出均不转换</li><li>input: 提交时转换为LF，检出时不转换</li></ul><blockquote><p>CRLF 与 LF 混合的文本文件不受此配置控制。</p></blockquote><blockquote><p>Git 安装后默认为 false</p></blockquote><p>所以，一种规范换行符的方式是这样的：</p><p>使用 Windows 系统的开发者设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.aurocrlf true</span><br></pre></td></tr></table></figure></p><p>使用 Linux/MacOS 的开发者设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure></p><h4 id="core-safecrlf"><a href="#core-safecrlf" class="headerlink" title="core.safecrlf"></a>core.safecrlf</h4><p>git同时提供了另一个配置项 <code>safecrlf</code>，用于检查文件是否包含混合换行符，该配置也有三个可选项：</p><ul><li>true 禁止提交混合换行符的文本文件(git add 的时候会被拦截，提示异常)</li><li>warn 提交混合换行符的文本文件的时候发出警告，但是不会阻止 git add 操作</li><li>false 不禁止提交混合换行符的文本文件（默认配置）</li></ul><p>该配置用来防止错误的标准化与转换。</p><h4 id="gitattributes-文件"><a href="#gitattributes-文件" class="headerlink" title=".gitattributes 文件"></a><code>.gitattributes</code> 文件</h4><p><code>core.autocrlf</code> 的配置依赖于每一位参与项目的开发机器上的配置，这很难确保每个人都能正确配置。<br>于是在规范项目中的换行符方面，还有一套添加配置文件的方案。<br>在项目的根目录下可以添加一个<code>.gitattributes</code> 文件。<br>它的优先级高于<code>core.autocrlf</code>的设置，可以覆盖<code>core.autocrlf</code>的。<br>它类似于 <code>.gitignore</code> 文件，随提交修改生效，一个项目中可以维持一份相同的配置。<br>所以，它能够避免每个开发人员配置不同的问题。</p><p><code>.gitattributes</code>文件的功能不只有配置换行符，所以它的配置相对复杂一下。<br>详细的说明文档可以参考 <a href="http://schacon.github.io/git/gitattributes.html" target="_blank" rel="noopener">地址</a>。<br>这里只针对换行符的配置做一下简单的介绍：</p><p>每行基本形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter attr1 attr2 ....</span><br></pre></td></tr></table></figure><p>filter 代表匹配文件的通配符，在它后面跟着相应的属性，用空格间隔。</p><p>filter 的选项比较简单，常见的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 匹配所有文件</span><br><span class="line">*.txt  匹配文件名以txt结尾的文件</span><br></pre></td></tr></table></figure><p>attr的选择比较多，其中与换行符相关的属性只有几条：</p><ul><li>text<ul><li>text 自动完成标准化与转换</li><li>-text 不执行标准化与转换</li><li>text=auto 根据 Git 决定是否需要执行标准化与转化</li><li>不设置 使用core.autocrlf配置决定是否执行标准化与转换</li></ul></li><li>eol<ul><li>eol=lf 强制完成标准化，不执行转换（相当于指定转换为LF格式）</li><li>eol=crlf 强制完成标准化，指定转换为CRLF格式</li></ul></li><li>binary<ul><li>binary 二进制文件不参与标准化与转换</li><li>不设置 由 Git 决定是否为二进制文件</li></ul></li></ul><blockquote><p>text 设置的时候，转换自动转换到对应平台的换行符</p></blockquote><blockquote><p>行号高的设置会覆盖行号低的设置</p></blockquote><p>这里给出一个简单的例子来说明一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Set the default behavior, in case people don&apos;t have core.autocrlf set.</span><br><span class="line">* text eol=lf</span><br><span class="line"></span><br><span class="line"># Denote all files that are truly binary and should not be modified.</span><br><span class="line">*.png binary</span><br><span class="line">*.jpg binary</span><br></pre></td></tr></table></figure></p><p><strong>推荐使用.gitattributes来规范项目中换行符。简单，方便，灵活。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.jianshu.com/p/ec9564fe1c2b" target="_blank" rel="noopener">理解 CRLF，LF</a></li><li><a href="http://blog.konghy.cn/2017/03/19/git-lf-or-crlf/" target="_blank" rel="noopener">Git 多平台换行符问题(LF or CRLF)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;差异&quot;&gt;&lt;a href=&quot;#差异&quot; class=&quot;headerlink&quot; title=&quot;差异&quot;&gt;&lt;/a&gt;差异&lt;/h3&gt;&lt;p&gt;目前大部分的前端开发用macos/windows来开发，linux系统使用的较少。&lt;br&gt;一个多人开发的项目必然会覆盖windows和unix系统。&lt;br&gt;而这个两个系统间存在一些差异，其中之一就是文本换行的方式。&lt;/p&gt;
&lt;p&gt;CRLF, LF 都是用来表示文本换行的方式。主流的操作系统一般使用CRLF或者LF作为其文本的换行符。&lt;br&gt;CR(Carriage Return) 代表回车，对应字符 &lt;code&gt;\r&lt;/code&gt;；LF(Line Feed) 代表换行，对应字符 &lt;code&gt;\n&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;unix/linux(macos)使用的是LF，windows使用的是CRLF。&lt;/p&gt;
&lt;p&gt;跨平台协作开发是常有的，不统一的换行符确实对跨平台的文件交换带来了麻烦。&lt;br&gt;最大的问题是，在不同平台上，换行符发生改变时，Git 会认为整个文件被修改，这就造成我们 &lt;code&gt;diff&lt;/code&gt; 不能正确反映本次的修改。&lt;/p&gt;
&lt;p&gt;例如在查看&lt;code&gt;diff&lt;/code&gt;的时候，出现下面的情况：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;warning: LF will be replaced by CRLF in .gitignore.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The file will have its original line endings in your working directory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;warning: LF will be replaced by CRLF in README.md.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The file will have its original line endings in your working directory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="version-control" scheme="https://sampwood.github.io/categories/coding/version-control/"/>
    
    
      <category term="git" scheme="https://sampwood.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>全局配置ESLint</title>
    <link href="https://sampwood.github.io/2019/01/04/%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AEESLint/"/>
    <id>https://sampwood.github.io/2019/01/04/全局配置ESLint/</id>
    <published>2019-01-04T06:23:58.000Z</published>
    <updated>2019-03-06T05:51:53.742Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ESLint是一个Javascript静态检查工具，它可以帮你养成良好的编程习惯，使你的javascript代码达到国际化的水准。ESLint是所有Javascrpt静态检查工具里最晚诞生的一个，之前还曾经有过JSLint以及JSHint等工具，但JSLint和JSHint都是用的一套标准，在目前这个前端技术飞速发展的时代已经显得有点落伍。ESLint的好处是既提供了国际大厂的标准，同时又给了你自定义标准的可能性。ESLint的推荐设置方式是按项目设置，但是如果我们有很多个不同的javascript项目的话，一个一个去设置未免太麻烦，所以在这里介绍的是全局设置方法，一次设置，所有项目全部采用同一标准。</p></blockquote><p>目前在自己的机子上面用到的eslint配置是：<code>airbnb</code>+<code>eslint-plugin-vue</code>。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>需要安装的包有：<code>eslint</code>, <code>eslint-config-airbnb-base</code>, <code>eslint-plugin-import</code>, <code>eslint-plugin-vue</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g eslint eslint-config-airbnb-base eslint-plugin-import eslint-plugin-vue</span><br></pre></td></tr></table></figure></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>安装好依赖包之后，需要编写全局<code>.eslintrc</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;airbnb-base&quot;,</span><br><span class="line">    &quot;plugin:vue/recommended&quot;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如此这般，就可以在任何地方js文件中使用同一套标准去检查了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;mid=2651230875&amp;idx=1&amp;sn=092211db96adfc85a26b457f7e9421a0&amp;chksm=bd494b1f8a3ec20902ad0df7d6a3735b536fe585086abc9035fe24d69549bb4c81cf88658515&amp;mpshare=1&amp;scene=1&amp;srcid=0104C1J16lllbEgkIyFIFJmp#rd" target="_blank" rel="noopener">【第1495期】 ESLint 工作原理探讨</a></li><li><a href="https://segmentfault.com/a/1190000005984309" target="_blank" rel="noopener">atom使用全局配置ESLint</a></li><li><a href="https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb" target="_blank" rel="noopener">airbnb/javascript</a></li><li><a href="https://vuejs.github.io/eslint-plugin-vue/user-guide/" target="_blank" rel="noopener">eslint-plugin-vue</a></li><li><a href="https://github.com/dustinspecker/awesome-eslint" target="_blank" rel="noopener">dustinspecker/awesome-eslint</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ESLint是一个Javascript静态检查工具，它可以帮你养成良好的编程习惯，使你的javascript代码达到国际化的水准。ESLint是所有Javascrpt静态检查工具里最晚诞生的一个，之前还曾经有过JSLint以及JSHint等工具，但JSLint和JSHint都是用的一套标准，在目前这个前端技术飞速发展的时代已经显得有点落伍。ESLint的好处是既提供了国际大厂的标准，同时又给了你自定义标准的可能性。ESLint的推荐设置方式是按项目设置，但是如果我们有很多个不同的javascript项目的话，一个一个去设置未免太麻烦，所以在这里介绍的是全局设置方法，一次设置，所有项目全部采用同一标准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目前在自己的机子上面用到的eslint配置是：&lt;code&gt;airbnb&lt;/code&gt;+&lt;code&gt;eslint-plugin-vue&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="https://sampwood.github.io/categories/coding/"/>
    
      <category term="linter" scheme="https://sampwood.github.io/categories/coding/linter/"/>
    
    
      <category term="environment" scheme="https://sampwood.github.io/tags/environment/"/>
    
      <category term="eslint" scheme="https://sampwood.github.io/tags/eslint/"/>
    
  </entry>
  
</feed>
